)]}'
{"version":3,"sources":["pauli:linkedin/linkedin_configure.html","pauli:linkedin/linkedin_configure.js","pauli:linkedin/linkedin_common.js","pauli:linkedin/linkedin_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+D;AACA,kI;AACA,kB;AACA,qS;AACA,I;;;;;;;;;;;;;;;;;;;ACLA,uE;AACA,8B;AACA,E;;AAEA,sE;AACA,U;AACA,6C;AACA,6C;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACTA,sC;AACA,gB;AACA,C;;;;;;;;;;;;;;;;;;;ACFA,4C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,oF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,kF;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,wC;AACA,kE;;AAEA,iB;AACA,8C;AACA,mD;AACA,G;;AAEA,kE;;AAEA,gB;AACA,6D;AACA,iE;AACA,mE;AACA,2B;AACA,mE;;AAEA,qB;AACA,6B;AACA,2B;AACA,uB;AACA,yE;AACA,oC;AACA,K;AACA,E","file":"/packages/pauli_linkedin.js","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForLinkedin\");\nTemplate[\"configureLoginServiceDialogForLinkedin\"] = new Template(\"Template.configureLoginServiceDialogForLinkedin\", (function() {\n  var view = this;\n  return HTML.Raw('<p>\\n    First, you\\'ll need to register your app on Linkedin. Follow these steps:\\n  </p>\\n  <ol>\\n    <li>\\n      Visit <a href=\"https://www.linkedin.com/secure/developer?newapp=\" target=\"_blank\">https://www.linkedin.com/secure/developer?newapp=</a>\\n    </li>\\n  </ol>');\n}));\n","Template.configureLoginServiceDialogForLinkedin.siteUrl = function () {\n  return Meteor.absoluteUrl();\n};\n\nTemplate.configureLoginServiceDialogForLinkedin.fields = function () {\n  return [\n    {property: 'clientId', label: 'API Key'},\n    {property: 'secret', label: 'Secret Key'}\n  ];\n};\n","if (typeof LinkedIn === 'undefined') {\n  LinkedIn = {};\n}\n","// Request LinkedIn credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nLinkedIn.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'linkedin'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    return;\n  }\n\n  var credentialToken = Random.secret();\n  var loginStyle = OAuth._loginStyle('linkedin', config, options);\n\n  var scope = [];\n  if (options && options.requestPermissions) {\n      scope = options.requestPermissions.join('+');\n  }\n\n  var loginStyle = OAuth._loginStyle('linkedin', config, options);\n\n  var loginUrl =\n        'https://www.linkedin.com/uas/oauth2/authorization' +\n        '?response_type=code' + '&client_id=' + config.clientId +\n        '&redirect_uri=' + OAuth._redirectUri('linkedin', config) +\n        '&scope=' + scope +\n        '&state=' + OAuth._stateParam(loginStyle, credentialToken);\n\n  OAuth.launchLogin({\n    loginService: \"linkedin\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken\n  });\n};\n"]}