{"version":3,"sources":["telescope-base/lib/base.js","telescope-base/lib/colors.js","telescope-base/lib/icons.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oF;;AAEA,2F;AACA,qB;AACA,yB;AACA,qB;;AAEA,4C;AACA,iC;AACA,C;;AAEA,+C;AACA,qC;AACA,C;;AAEA,uC;AACA,qC;AACA,C;;AAEA,4C;AACA,iC;AACA,C;;AAEA,4B;AACA,6G;AACA,6G;AACA,G;AACA,uF;;AAEA,gB;AACA,G;AACA,a;AACA,oB;AACA,I;AACA,G;AACA,a;AACA,qB;AACA,I;AACA,G;AACA,a;AACA,qB;AACA,G;AACA,E;;AAEA,iB;AACA,kB;AACA,kB;;AAEA,uF;;;AAGA,8B;AACA,c;AACA,E;;AAEA,gB;AACA,G;AACA,yB;AACA,a;AACA,I;AACA,G;AACA,iC;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,G;AACA,E;;AAEA,a;AACA,G;AACA,yB;AACA,a;AACA,I;AACA,G;AACA,iC;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,G;AACA,E;;AAEA,2C;AACA,a;AACA,G;AACA,uB;AACA,iB;AACA,qC;AACA,I;AACA,G;AACA,uB;AACA,iB;AACA,+B;AACA,I;AACA,G;AACA,wB;AACA,kB;AACA,4C;AACA,I;AACA,G;AACA,2B;AACA,qB;AACA,6C;AACA,mB;AACA,I;AACA,G;AACA,6B;AACA,uB;AACA,0C;AACA,mB;AACA,I;AACA,E;;AAEA,2C;AACA,a;AACA,G;AACA,sB;AACA,sB;AACA,2C;AACA,I;AACA,G;AACA,4B;AACA,mB;AACA,kC;AACA,G;AACA,E;;AAEA,Y;AACA,G;AACA,wB;AACA,0E;AACA,M;AACA,qB;AACA,uC;AACA,I;AACA,G;AACA,wB;AACA,kE;AACA,M;AACA,0B;AACA,uC;AACA,I;AACA,G;AACA,sB;AACA,sB;AACA,+B;AACA,mB;AACA,I;AACA,G;AACA,qB;AACA,sB;AACA,8B;AACA,G;AACA,E;AACA,kF;;;AAGA,8C;AACA,oB;;AAEA,8E;AACA,iC;AACA,S;AACA,2B;AACA,I;AACA,Y;AACA,a;AACA,G;AACA,E;;AAEA,uC;AACA,U;AACA,4C;AACA,I;AACA,E;;AAEA,uC;AACA,U;AACA,+C;AACA,I;AACA,E;;AAEA,wC;AACA,U;AACA,gD;AACA,I;AACA,E;;AAEA,2C;AACA,U;AACA,W;AACA,e;AACA,M;AACA,qC;AACA,oB;AACA,I;AACA,E;;AAEA,6C;AACA,U;AACA,yC;AACA,mC;AACA,I;AACA,E;;AAEA,6C;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,E;;AAEA,oD;AACA,gD;AACA,4D;AACA,U;AACA,mF;AACA,6C;AACA,I;AACA,E;;AAEA,sD;AACA,gD;AACA,8D;AACA,wE;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,E;;AAEA,iB;;AAEA,mB;;AAEA,mB;;AAEA,sB;AACA,G;AACA,6B;AACA,a;AACA,G;AACA,E;;AAEA,e;AACA,G;AACA,yB;AACA,Y;AACA,I;AACA,G;AACA,2B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,G;AACA,E;;AAEA,mB;;AAEA,e;AACA,G;AACA,0B;AACA,a;AACA,I;AACA,G;AACA,2B;AACA,a;AACA,G;AACA,E;;AAEA,Y;AACA,G;AACA,2B;AACA,a;AACA,I;AACA,G;AACA,yB;AACA,a;AACA,I;AACA,G;AACA,iC;AACA,a;AACA,I;AACA,G;AACA,0B;AACA,a;AACA,G;AACA,E;AACA,6E;;AAEA,wB;;AAEA,+B;AACA,+B;AACA,wE;;AAEA,2D;AACA,uF;AACA,gE;;AAEA,0B;;AAEA,2B;;AAEA,oC;AACA,kC;AACA,kC;AACA,uC;;AAEA,kC;AACA,gC;AACA,gD;AACA,qD;;AAEA,+B;AACA,6B;AACA,0B;AACA,+B;;AAEA,qB;AACA,uB;AACA,2B;AACA,6B;AACA,2B;AACA,6B;AACA,iC;AACA,mC;;AAEA,0F;;AAEA,sB;AACA,G;AACA,yB;AACA,Y;AACA,I;AACA,G;AACA,0B;AACA,Y;AACA,I;AACA,M;AACA,oC;AACA,e;AACA,O;AACA,M;AACA,sC;AACA,e;AACA,O;AACA,G;AACA,6B;AACA,Y;AACA,G;AACA,E;;AAEA,mB;AACA,G;AACA,4B;AACA,Y;AACA,G;AACA,E;;AAEA,+B;AACA,kB;AACA,mD;AACA,G;AACA,E;;AAEA,qF;;AAEA,c;;AAEA,+B;AACA,6E;AACA,oD;AACA,E;;AAEA,kF;;AAEA,iB;AACA,yE;AACA,E;;AAEA,iF;;AAEA,iD;AACA,0B;;AAEA,iF;;AAEA,yC;AACA,uC;;AAEA,gC;AACA,W;AACA,E;;;;;;;;;;;;;;;;;;;AC1ZA,c;AACA,kB;AACA,0B;AACA,qB;AACA,4B;AACA,C;;AAEA,6D;AACA,qC;;AAEA,sC;AACA,+B;;AAEA,kC;AACA,C;;AAEA,Y;;AAEA,iG;AACA,iH;AACA,uG;AACA,uH;;AAEA,c;;AAEA,kB;AACA,wD;AACA,2C;AACA,+B;AACA,6C;AACA,iD;AACA,+B;AACA,6B;AACA,wB;AACA,sC;AACA,8B;AACA,kC;;AAEA,mD;AACA,qC;AACA,sC;AACA,4C;AACA,mF;AACA,2C;AACA,mD;AACA,wD;AACA,2D;AACA,qC;AACA,kD;AACA,+C;AACA,mD;;AAEA,uC;AACA,qC;;AAEA,sB;;AAEA,uC;AACA,yB;AACA,0B;AACA,gC;AACA,uE;AACA,+B;AACA,uC;AACA,4C;AACA,+C;AACA,yB;AACA,+C;AACA,kC;AACA,uC;;AAEA,iB;;AAEA,yC;;AAEA,yB;;AAEA,6B;AACA,qC;AACA,6C;;AAEA,iE;AACA,4E;;;;;;;;;;;;;;;;;;;AClFA,iF;;AAEA,kF;AACA,0C;AACA,gE;AACA,uE;AACA,2G;AACA,C;;AAEA,S;AACA,e;AACA,iB;AACA,uB;AACA,iB;AACA,2B;AACA,8B;AACA,qB;AACA,4B;AACA,8B;AACA,uB;AACA,0B;AACA,qB;AACA,e;AACA,0B;AACA,oB;AACA,iB;AACA,qB;AACA,kB;AACA,e;AACA,kB;AACA,C","file":"/packages/telescope-base.js","sourcesContent":["// ------------------------------------- Schemas -------------------------------- //\n\n// array containing properties to be added to the post/settings/comments schema on startup.\naddToPostSchema = [];\naddToCommentsSchema = [];\naddToUserSchema = [];\n\nregisterPostProperty = function (property) {\n  addToPostSchema.push(property);\n}\n\nregisterCommentProperty = function (property) {\n  addToCommentsSchema.push(property);\n}\n\nregisterSetting = function (property) {\n  addToSettingsSchema.push(property);\n}\n\nregisterUserProperty = function (property) {\n  addToUserSchema.push(property);\n}\n\nSimpleSchema.extendOptions({\n  editable: Match.Optional(Boolean),  // editable: true means the field can be edited by the document's owner\n  hidden: Match.Optional(Boolean)     // hidden: true means the field is never shown in a form no matter what\n});\n// ----------------------------------- Posts Statuses ------------------------------ //\n\npostStatuses = [\n  {\n    value: 1,\n    label: 'Pending'\n  },\n  {\n    value: 2,\n    label: 'Approved'\n  },\n  {\n    value: 3,\n    label: 'Rejected'\n  }\n];\n\nSTATUS_PENDING=1;\nSTATUS_APPROVED=2;\nSTATUS_REJECTED=3;\n\n// ------------------------------------- Navigation -------------------------------- //\n\n\n// array containing nav items;\nprimaryNav = [\n];\n\nsecondaryNav = [\n  {\n    template: 'userMenu',\n    order: 10\n  },\n  {\n    template:'notificationsMenu',\n    order: 20\n  },\n  {\n    template: 'submitButton',\n    order: 30\n  }\n];\n\nmobileNav = [\n  {\n    template: 'userMenu',\n    order: 10\n  },\n  {\n    template:'notificationsMenu',\n    order: 20\n  },\n  {\n    template: 'submitButton',\n    order: 30\n  }\n];\n\n// array containing items in the views menu\nviewsMenu = [\n  {\n    route: 'posts_top',\n    label: 'top',\n    description: 'most_popular_posts'\n  },\n  {\n    route: 'posts_new',\n    label: 'new',\n    description: 'newest_posts'\n  },\n  {\n    route: 'posts_best',\n    label: 'best',\n    description: 'highest_ranked_posts_ever'\n  },\n  {\n    route: 'posts_pending',\n    label: 'pending',\n    description: 'posts_awaiting_moderation',\n    adminOnly: true\n  },\n  {\n    route: 'posts_scheduled',\n    label: 'scheduled',\n    description: 'future_scheduled_posts',\n    adminOnly: true\n  },\n];\n\n// array containing items in the admin menu\nadminMenu = [\n  {\n    route: 'settings',\n    label: 'Settings',\n    description: 'telescope_settings_panel'\n  },\n  {\n    route: 'usersDashboard',\n    label: 'Users',\n    description: 'users_dashboard'\n  }\n];\n\nuserMenu = [\n  {\n    route: function () {\n      return Router.path('user_profile', {_idOrSlug: Meteor.user().slug});\n    },\n    label: 'profile',\n    // description: 'view_your_profile'\n  },\n  {\n    route: function () {\n      return Router.path('user_edit', {slug: Meteor.user().slug});\n    },\n    label: 'edit_account',\n    // description: 'edit_your_profile'\n  },\n  {\n    route: 'settings',\n    label: 'settings',\n    // description: 'settings',\n    adminOnly: true\n  },\n  {\n    route: 'signOut',\n    label: 'sign_out',\n    // description: 'sign_out'\n  }\n];\n// ------------------------------------- Views -------------------------------- //\n\n\n// object containing post list view parameters\nviewParameters = {};\n\n// will be common to all other view unless specific properties are overwritten\nviewParameters.baseParameters = {\n  find: {\n    status: STATUS_APPROVED\n  },\n  options: {\n    limit: 10\n  }\n};\n\nviewParameters.top = function (terms) {\n  return {\n    options: {sort: {sticky: -1, score: -1}}\n  };\n};\n\nviewParameters.new = function (terms) {\n  return {\n    options: {sort: {sticky: -1, postedAt: -1}}\n  };\n};\n\nviewParameters.best = function (terms) {\n  return {\n    options: {sort: {sticky: -1, baseScore: -1}}\n  };\n};\n\nviewParameters.pending = function (terms) {\n  return {\n    find: {\n      status: 1\n    },\n    options: {sort: {createdAt: -1}},\n    showFuture: true\n  };\n};\n\nviewParameters.scheduled = function (terms) {\n  return {\n    find: {postedAt: {$gte: new Date()}},\n    options: {sort: {postedAt: -1}}\n  };\n};\n\nviewParameters.userPosts = function (terms) {\n  return {\n    find: {userId: terms.userId},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n};\n\nviewParameters.userUpvotedPosts = function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.votes.upvotedPosts, \"itemId\");\n  return {\n    find: {_id: {$in: postsIds}, userId: {$ne: terms.userId}}, // exclude own posts\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n};\n\nviewParameters.userDownvotedPosts = function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.votes.downvotedPosts, \"itemId\");\n  // TODO: sort based on votedAt timestamp and not postedAt, if possible\n  return {\n    find: {_id: {$in: postsIds}},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n};\n\nheroModules = [];\n\nfooterModules = [];\n\nthreadModules = [];\n\npostListTopModules = [\n  {\n    template: 'postViewsNav',\n    order: 99\n  }\n];\n\npostModules = [\n  {\n    template: 'postRank',\n    order: 1\n  },\n  {\n    template: 'postUpvote',\n    order: 10\n  },\n  {\n    template: 'postContent',\n    order: 20\n  },\n  {\n    template: 'postAvatars',\n    order: 30\n  },\n  {\n    template: 'postDiscuss',\n    order: 40\n  },\n  {\n    template: 'postActions',\n    order: 50\n  }\n];\n\npostThumbnail = [];\n\npostHeading = [\n  {\n    template: 'postTitle',\n    order: 10\n  },\n  {\n    template: 'postDomain',\n    order: 20\n  }\n];\n\npostMeta = [\n  {\n    template: 'postAuthor',\n    order: 10\n  },\n  {\n    template: 'postInfo',\n    order: 20\n  },\n  {\n    template: 'postCommentsLink',\n    order: 30\n  },\n  {\n    template: 'postAdmin',\n    order: 50\n  }\n];\n// ------------------------------ Callbacks ------------------------------ //\n\npostClassCallbacks = [];\n\npostSubmitClientCallbacks = [];\npostSubmitMethodCallbacks = [];\npostAfterSubmitMethodCallbacks = []; // runs on server only in a timeout\n\npostEditClientCallbacks = []; // loops over modifier object\npostEditMethodCallbacks = []; // loops over modifier (i.e. \"{$set: {foo: bar}}\") object\npostAfterEditMethodCallbacks = []; // loops over modifier object\n\npostApproveCallbacks = [];\n\ncommentClassCallbacks = [];\n\ncommentSubmitRenderedCallbacks = [];\ncommentSubmitClientCallbacks = [];\ncommentSubmitMethodCallbacks = [];\ncommentAfterSubmitMethodCallbacks = [];\n\ncommentEditRenderedCallbacks = [];\ncommentEditClientCallbacks = [];\ncommentEditMethodCallbacks = []; // not used yet\ncommentAfterEditMethodCallbacks = []; // not used yet\n\nuserEditRenderedCallbacks = [];\nuserEditClientCallbacks = [];\nuserCreatedCallbacks = [];\nuserProfileCompleteChecks = [];\n\nupvoteCallbacks = [];\ndownvoteCallbacks = [];\ncancelUpvoteCallbacks = [];\ncancelDownvoteCallbacks = [];\nupvoteMethodCallbacks = [];\ndownvoteMethodCallbacks = [];\ncancelUpvoteMethodCallbacks = [];\ncancelDownvoteMethodCallbacks = [];\n\n// ------------------------------------- User Profiles -------------------------------- //\n\nuserProfileDisplay = [\n  {\n    template: 'userInfo',\n    order: 1\n  },\n  {\n    template: 'userPosts',\n    order: 2\n  },\n  // {\n  //   template: 'userUpvotedPosts',\n  //   order: 3\n  // },\n  // {\n  //   template: 'userDownvotedPosts',\n  //   order: 5\n  // },\n  {\n    template: 'userComments',\n    order: 5\n  }\n];\n\nuserProfileEdit = [\n  {\n    template: 'userAccount',\n    order: 1\n  }\n];\n\nuserProfileCompleteChecks.push(\n  function(user) {\n    return !!getEmail(user) && !!getUserName(user);\n  }\n);\n\n// ------------------------------ Dynamic Templates ------------------------------ //\n\ntemplates = {}\n\ngetTemplate = function (name) {\n  // if template has been overwritten, return this; else return template name\n  return !!templates[name] ? templates[name] : name;\n};\n\n// ------------------------------ Theme Settings ------------------------------ //\n\nthemeSettings = {\n  'useDropdowns': true // whether or not to use dropdown menus in a theme\n};\n\n// ------------------------------ Subscriptions ------------------------------ //\n\n// array containing subscriptions to be preloaded\npreloadSubscriptions = [];\n\n// ------------------------------- Vote Power -------------------------------- //\n\n// The equation to determine voting power\n// Default to returning 1 for everybody\n\ngetVotePower = function (user) {\n  return 1;\n};\n","colorTable = {\n  accentColor: [],\n  accentContrastColor: [],\n  secondaryColor: [],\n  secondaryContrastColor: []\n}\n\nregisterElementColor = function (selector, color, property) {\n  var element = {selector: selector};\n\n  if (typeof property !== \"undefined\")\n    element.property = property\n\n  colorTable[color].push(element);\n}\n\n// shortcuts\n\naccent = function (selector, property) {registerElementColor(selector, \"accentColor\", property);}\naccentContrast = function (selector, property) {registerElementColor(selector, \"accentContrastColor\", property);}\nsecondary = function (selector, property) {registerElementColor(selector, \"secondaryColor\", property);}\nsecondaryContrast = function (selector, property) {registerElementColor(selector, \"secondaryContrastColor\", property);}\n\n// accentColor\n\naccent(\"a:hover\");\naccent(\".post-content .post-heading .post-title:hover\");\naccent(\".post-content .post-upvote .icon\");\naccent(\".comment-actions a i\");\naccent(\".comment-actions.upvoted .upvote i\");\naccent(\".comment-actions.downvoted .downvote i\");\naccent(\".toggle-actions-link\");\naccent(\".post-meta a:hover\");\naccent(\".action:hover\");\naccent(\".post-upvote .upvote-link i\");\naccent(\".post-actions .icon\");\naccent(\".post-share .icon-share\");\n\naccent('input[type=\"submit\"]', 'background-color');\naccent(\"button\", 'background-color');\naccent(\".button\", 'background-color');\naccent(\"button.submit\", 'background-color');\naccent(\".auth-buttons #login-buttons #login-buttons-password\", 'background-color');\naccent(\".btn-primary\", 'background-color');\naccent(\".header .btn-primary\", 'background-color');\naccent(\".header .btn-primary:link\", 'background-color');\naccent(\".header .btn-primary:visited\", 'background-color');\naccent(\".error\", 'background-color');\naccent(\".mobile-menu-button\", 'background-color');\naccent(\".login-link-text\", 'background-color');\naccent(\".post-category:hover\", 'background-color');\n\naccent(\".icon-upvote\", \"border-color\");\naccent(\".icon-more\", \"border-color\");\n\n// accentContrastColor\n\naccentContrast('input[type=\"submit\"]');\naccentContrast(\"button\");\naccentContrast(\".button\");\naccentContrast(\"button.submit\");\naccentContrast(\".auth-buttons #login-buttons #login-buttons-password\");\naccentContrast(\".btn-primary\");\naccentContrast(\".header .btn-primary\");\naccentContrast(\".header .btn-primary:link\");\naccentContrast(\".header .btn-primary:visited\");\naccentContrast(\".error\");\naccentContrast(\".header a.mobile-menu-button\");\naccentContrast(\"login-link-text\");\naccentContrast(\".post-category:hover\");\n\n// secondaryColor\n\nsecondary(\".header\", \"background-color\");\n\n// secondaryContrastColor\n\nsecondaryContrast(\".header\");\nsecondaryContrast(\".header .logo a\");\nsecondaryContrast(\".header .logo a:visited\");\n\nsecondaryContrast(\".header .dropdown-top-level\", \"border-color\");\nsecondaryContrast(\".header .dropdown-accordion .show-more\", \"border-color\");\n","// ------------------------------ Dynamic Icons ------------------------------ //\n\n// take an icon name (such as \"open\") and return the HTML code to display the icon\ngetIcon = function (iconName, iconClass) {\n  var iconCode = !!icons[iconName] ? icons[iconName] : iconName;\n  var iconClass = (typeof iconClass === 'string') ? ' '+iconClass : '';\n  return '<i class=\"icon fa fa-' + iconCode + ' icon-' + iconName + iconClass+ '\" aria-hidden=\"true\"></i>';\n}\n\nicons = {\n  open: \"plus\",\n  close: \"minus\",\n  upvote: \"chevron-up\",\n  voted: \"check\",\n  downvote: \"chevron-down\",\n  facebook: \"facebook-square\",\n  twitter: \"twitter\",\n  googleplus: \"google-plus\",\n  linkedin: \"linkedin-square\",\n  comment: \"comment-o\",\n  share: \"share-square-o\",\n  more: \"ellipsis-h\",\n  menu: \"bars\",\n  subscribe: \"envelope-o\",\n  delete: \"trash-o\",\n  edit: \"pencil\",\n  popularity: \"fire\",\n  time: \"clock-o\",\n  best: \"star\",\n  search: \"search\"\n}"]}