{"version":3,"sources":["telescope-embedly//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-embedly/package-tap.i18n","telescope-embedly/lib/embedly.js","telescope-embedly/lib/client/autoform-postthumbnail.html","telescope-embedly/lib/client/autoform-postthumbnail.js","telescope-embedly/lib/client/post_thumbnail.html","telescope-embedly/lib/client/post_thumbnail.js","telescope-embedly/lib/client/post_video.html","telescope-embedly/lib/client/post_video.js","telescope-embedly//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-embedly/i18n/en.i18n.json","telescope-embedly//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-embedly/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;AAAA,mH;;AAEA,+D;AACA,gD;AACA,2C;AACA,6E;AACA,uH;;AAEA,qD;AACA,6B;AACA,yC;;;;;;;;;;;;;;;;;;;ACVA,yB;AACA,+B;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,qC;AACA,K;AACA,G;AACA,C;AACA,wC;;AAEA,qB;AACA,wB;AACA,mB;AACA,iB;AACA,mB;AACA,mB;AACA,iB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,C;AACA,oC;;AAEA,oB;AACA,4B;AACA,W;AACA,G;;AAEA,0B;AACA,6B;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,uB;AACA,mB;AACA,K;AACA,G;AACA,C;AACA,yC;;AAEA,8B;AACA,iC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,C;AACA,6C;;AAEA,+B;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,C;AACA,8C;;AAEA,uE;AACA,mD;AACA,8E;AACA,0C;AACA,G;;;;;;;;;;;;;;;;;;;;ACxEA,wC;AACA,oF;AACA,kB;AACA,8B;AACA,2D;AACA,iB;AACA,+B;AACA,0C;AACA,yB;AACA,wD;AACA,O;AACA,2B;AACA,uB;AACA,4E;AACA,Q;AACA,wC;AACA,yB;AACA,wD;AACA,O;AACA,4B;AACA,uC;AACA,mG;AACA,qB;AACA,yB;AACA,4E;AACA,O;AACA,mB;AACA,6E;AACA,yB;AACA,gB;AACA,0C;AACA,0C;AACA,0E;AACA,yB;AACA,gB;AACA,sC;AACA,0C;AACA,qE;AACA,kB;AACA,iB;AACA,4C;AACA,oD;AACA,mB;AACA,qE;AACA,kF;AACA,sB;AACA,mB;AACA,qE;AACA,oG;AACA,sB;AACA,iB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACrDA,kD;AACA,6B;AACA,G;;AAEA,2C;;AAEA,iE;AACA,oC;AACA,wC;AACA,sC;AACA,4B;;AAEA,oE;AACA,mD;AACA,+D;;AAEA,c;AACA,4C;AACA,yB;AACA,iD;AACA,+D;AACA,kB;AACA,0B;AACA,+C;AACA,mD;AACA,c;AACA,O;AACA,iB;AACA,uD;AACA,4C;AACA,kD;;AAEA,+B;AACA,mD;;AAEA,yE;AACA,sC;AACA,sE;AACA,2C;;AAEA,O;AACA,O;AACA,G;AACA,C;;AAEA,gD;AACA,sB;AACA,qD;AACA,uG;AACA,4D;AACA,e;AACA,4C;AACA,K;AACA,C;;AAEA,kC;AACA,uC;AACA,kC;AACA,0B;AACA,2D;AACA,gB;AACA,I;AACA,sB;AACA,6D;AACA,+D;AACA,wE;AACA,I;AACA,iC;AACA,iD;AACA,sD;AACA,G;AACA,G;;AAEA,iD;;AAEA,sB;AACA,oC;;AAEA,iC;AACA,8B;AACA,K;;AAEA,C;;AAEA,iC;AACA,mD;AACA,uB;AACA,mD;AACA,yB;AACA,I;AACA,8D;AACA,uB;AACA,8B;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;;AC7FA,sC;AACA,gF;AACA,kB;AACA,gC;AACA,uD;AACA,iB;AACA,iC;AACA,gC;AACA,2B;AACA,2B;AACA,2B;AACA,6F;AACA,Q;AACA,wB;AACA,2D;AACA,Q;AACA,sB;AACA,+B;AACA,sC;AACA,uB;AACA,+D;AACA,Q;AACA,4C;AACA,2B;AACA,yC;AACA,iB;AACA,iC;AACA,qC;AACA,iB;AACA,mC;AACA,gD;AACA,iB;AACA,uD;AACA,c;AACA,+D;AACA,8C;AACA,Q;AACA,mB;AACA,2C;AACA,kD;AACA,S;AACA,iB;AACA,O;AACA,I;;;;;;;;;;;;;;;;;;;AC5CA,gD;AACA,yB;AACA,sE;AACA,I;AACA,+B;AACA,yD;AACA,I;AACA,8B;AACA,oC;AACA,G;AACA,G;;AAEA,+C;AACA,mD;AACA,uB;AACA,2C;AACA,6E;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACjBA,kC;AACA,wE;AACA,kB;AACA,oC;AACA,gD;AACA,iB;AACA,iC;AACA,2C;AACA,2B;AACA,0C;AACA,e;AACA,mC;AACA,0C;AACA,2D;AACA,wE;AACA,yC;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AClBA,2C;AACA,+E;AACA,uB;AACA,8E;AACA,8C;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;ACNA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,ie;AACA,gD;AACA,8E;;AAEA,oD;AACA,8C;;AAEA,yC;AACA,C;;;;;;;;;;;;;;;;;;;ACjBA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C","file":"/packages/telescope-embedly.js","sourcesContent":["TAPi18n.packages[\"telescope-embedly\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n// define the package's templates registrar\nregisterI18nTemplate = TAPi18n._getRegisterHelpersProxy(\"telescope-embedly\");\nregisterTemplate = registerI18nTemplate; // XXX OBSOLETE, kept for backward compatibility will be removed in the future\n\n// Record the list of templates prior to package load\nvar _ = Package.underscore._;\nnon_package_templates = _.keys(Template);\n","var thumbnailProperty = {\n  propertyName: 'thumbnailUrl',\n  propertySchema: {\n    type: String,\n    optional: true,\n    autoform: {\n      editable: true,\n      type: 'bootstrap-postthumbnail'\n    }\n  }\n}\naddToPostSchema.push(thumbnailProperty);\n\nvar mediaProperty = {\n  propertyName: 'media',\n  propertySchema: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    hidden: true,\n    autoform: {\n      omit: true\n    }\n  }\n}\naddToPostSchema.push(mediaProperty);\n\npostThumbnail.push({\n  template: 'postThumbnail',\n  order: 15\n});\n\nvar embedlyKeyProperty = {\n  propertyName: 'embedlyKey',\n  propertySchema: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'embedly',\n      private: true\n    }\n  }\n}\nSettings.addToSchema(embedlyKeyProperty);\n\nvar thumbnailWidthProperty = {\n  propertyName: 'thumbnailWidth',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n}\nSettings.addToSchema(thumbnailWidthProperty);\n\nvar thumbnailHeightProperty = {\n  propertyName: 'thumbnailHeight',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n}\nSettings.addToSchema(thumbnailHeightProperty);\n\n// add callback that adds \"has-thumbnail\" or \"no-thumbnail\" CSS classes\npostClassCallbacks.push(function (post, postClass){\n  var thumbnailClass = !!post.thumbnailUrl ? \"has-thumbnail\" : \"no-thumbnail\";\n  return postClass + \" \" + thumbnailClass;\n});\n","\nTemplate.__checkName(\"afPostThumbnail\");\nTemplate[\"afPostThumbnail\"] = new Template(\"Template.afPostThumbnail\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"embedlyKeyExists\"));\n  }, function() {\n    return [ \"\\n  \", HTML.DIV({\n      \"class\": \"post-thumbnail-container\",\n      style: function() {\n        return Spacebars.mustache(view.lookup(\"style\"));\n      }\n    }, \"\\n    \", HTML.IMG({\n      src: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      },\n      \"class\": \"post-thumbnail-preview\",\n      style: function() {\n        return Spacebars.mustache(view.lookup(\"style\"));\n      }\n    }), \"\\n    \", HTML.DIV({\n      \"class\": \"post-thumbnail-loading\"\n    }, Spacebars.include(view.lookupTemplate(\"spinner\"))), \"\\n  \"), \"\\n  \", HTML.INPUT(HTML.Attrs({\n      type: \"hidden\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n    })), \"\\n  \", HTML.A({\n      href: \"#\",\n      \"class\": \"regenerate-thumbnail-link\"\n    }, Blaze.View(\"lookup:_\", function() {\n      return Spacebars.mustache(view.lookup(\"_\"), \"regenerate_thumbnail\");\n    })), \"\\n  \", HTML.A({\n      href: \"#\",\n      \"class\": \"remove-thumbnail-link\"\n    }, Blaze.View(\"lookup:_\", function() {\n      return Spacebars.mustache(view.lookup(\"_\"), \"clear_thumbnail\");\n    })), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"isAdmin\"));\n    }, function() {\n      return [ \"\\n      \", HTML.P(Blaze.View(\"lookup:_\", function() {\n        return Spacebars.mustache(view.lookup(\"_\"), \"please_fill_in_embedly_key\");\n      })), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n      \", HTML.P(Blaze.View(\"lookup:_\", function() {\n        return Spacebars.mustache(view.lookup(\"_\"), \"please_ask_your_admin_to_fill_in_embedly_key\");\n      })), \"\\n    \" ];\n    }), \"\\n  \" ];\n  });\n}));\n","AutoForm.addInputType(\"bootstrap-postthumbnail\", {\n  template: \"afPostThumbnail\"\n});\n\nvar fillEmbedlyData = function (instance) {\n\n  // note: the following fields are *not* in the current template\n  var $urlField = $('[name=\"url\"]');\n  var $titleField = $('[name=\"title\"]');\n  var $bodyField = $('[name=\"body\"]');\n  var url = $urlField.val();\n\n  var $thumbnailContainer = instance.$('.post-thumbnail-container');\n  var $img = instance.$('.post-thumbnail-preview');\n  var $thumbnailUrlField = instance.$('[name=\"thumbnailUrl\"]');\n\n  if (!!url) {\n    $thumbnailContainer.addClass('loading');\n    Messages.clearSeen();\n    console.log('getting embedly data for '+url);\n    Meteor.call('getEmbedlyData', url, function (error, data) {\n      if (error) {\n        console.log(error)\n        Messages.flash(error.message, 'error');\n        $thumbnailContainer.removeClass('loading');\n        return\n      }\n      if (data) {\n        // set thumbnail and fill in thumbnailUrl field\n        $img.attr('src', data.thumbnailUrl);\n        $thumbnailUrlField.val(data.thumbnailUrl);\n\n        // remove loading class\n        $thumbnailContainer.removeClass('loading');\n\n        if (!$titleField.val()) // if title field is empty, fill in title\n          $titleField.val(data.title);\n        if (!$bodyField.val()) // if body field is empty, fill in body\n          $bodyField.val(data.description);\n\n      }\n    });\n  }\n}\n\nTemplate.afPostThumbnail.created = function () {\n  var instance = this;\n  instance.embedlyKeyExists = new ReactiveVar(false);\n  // embedly key is not published to client, so we need a method to test if it has been provided or not\n  Meteor.call('embedlyKeyExists', function (error, result) {\n    if (result)\n      instance.embedlyKeyExists.set(result);\n  });\n}\n\nTemplate.afPostThumbnail.helpers({\n  atts: function addFormControlAtts() {\n    var atts = _.clone(this.atts);\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"form-control\");\n    return atts;\n  },\n  style: function () {\n    var thumbnailWidth = Settings.get('thumbnailWidth', 200);\n    var thumbnailHeight = Settings.get('thumbnailHeight', 125);\n    return \"width: \"+thumbnailWidth+\"px; height: \"+thumbnailHeight+\"px;\"\n  },\n  embedlyKeyExists: function () {\n    // haven't found a better way to do this yet…\n    return Template.instance().embedlyKeyExists.get();\n  }\n});\n\nTemplate.afPostThumbnail.rendered = function () {\n\n  var instance = this;\n  var $urlField = $('[name=\"url\"]');\n\n  $urlField.change(function (e) {\n    fillEmbedlyData(instance);\n  });\n\n}\n\nTemplate.afPostThumbnail.events({\n  'click .remove-thumbnail-link': function (e, t) {\n    e.preventDefault();\n    t.$('.post-thumbnail-preview').attr('src', '');\n    t.$('input').val('');\n  },\n  'click .regenerate-thumbnail-link': function (e, instance) {\n    e.preventDefault();\n    fillEmbedlyData(instance);\n  }\n})\n","\nTemplate.__checkName(\"postThumbnail\");\nTemplate[\"postThumbnail\"] = new Template(\"Template.postThumbnail\", (function() {\n  var view = this;\n  return [ Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"thumbnailUrl\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"post-thumbnail\",\n      \"aria-hidden\": \"true\"\n    }, \"\\n      \", HTML.A({\n      \"class\": function() {\n        return [ \"post-thumbnail-link \", Spacebars.mustache(view.lookup(\"playVideoClass\")) ];\n      },\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"postLink\"));\n      },\n      target: \"_blank\"\n    }, \"\\n        \", HTML.IMG({\n      \"class\": \"post-thumbnail-image\",\n      src: function() {\n        return Spacebars.mustache(view.lookup(\"thumbnailUrl\"));\n      },\n      onerror: \"this.style.display='none';\",\n      \"aria-hidden\": \"true\"\n    }), \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"post-thumbnail-empty\"\n    }), \"\\n  \" ];\n  }), \"\\n  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"media\"));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return {\n        template: Spacebars.call(view.lookup(\"videoTemplate\")),\n        data: Spacebars.call(view.lookup(\".\"))\n      };\n    }, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(Template.__dynamic);\n      });\n    }), \"\\n  \" ];\n  }) ];\n}));\n","Template[getTemplate('postThumbnail')].helpers({\n  postLink: function () {\n    return !!this.url ? getOutgoingUrl(this.url) : \"/posts/\"+this._id;\n  },\n  playVideoClass: function () {\n    return !!this.media ? 'post-thumbnail-has-video': '';\n  },\n  videoTemplate: function () {\n    return getTemplate('postVideo');\n  }\n});\n\nTemplate[getTemplate('postThumbnail')].events({\n  'click .post-thumbnail-has-video': function (e) {\n    e.preventDefault();\n    $('body').addClass('showing-lightbox');\n    $(e.target).parents('.post').find('.post-video-lightbox').fadeIn('fast');\n  }\n})","\nTemplate.__checkName(\"postVideo\");\nTemplate[\"postVideo\"] = new Template(\"Template.postVideo\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"media\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"post-video-lightbox hidden\"\n    }, \"\\n      \", HTML.A({\n      \"class\": \"post-video-lightbox-hide\",\n      href: \"#\"\n    }, \"×\"), \"\\n      \", HTML.DIV({\n      \"class\": \"post-video-lightbox-inner\"\n    }, \"\\n        \", Blaze.View(\"lookup:html\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"html\")));\n    }), \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","Template[getTemplate('postVideo')].events({\n  'click .post-video-lightbox-hide, click .post-video-lightbox': function (e) {\n    e.preventDefault();\n    $(e.target).parents('.post').find('.post-video-lightbox').fadeOut('fast');\n    $('body').removeClass('showing-lightbox');\n  }\n})","var _ = Package.underscore._,\n    package_name = \"telescope-embedly\",\n    namespace = \"telescope-embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"thumbnail\":\"Thumbnail\",\"thumbnailUrl\":\"Thumbnail\",\"regenerate_thumbnail\":\"Regenerate Thumbnail\",\"clear_thumbnail\":\"Clear Thumbnail\",\"please_fill_in_embedly_key\":\"Please fill in your Embedly API key to enable thumbnails.\",\"please_ask_your_admin_to_fill_in_embedly_key\":\"Please ask your site admin to fill in an Embedly API key to enable thumbnails.\",\"embedlyKey\":\"Embedly API Key\",\"thumbnailWidth\":\"Thumbnail Width\",\"thumbnailHeight\":\"Thumbnail Height\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\nvar package_templates = _.difference(_.keys(Template), non_package_templates);\n\nfor (var i = 0; i < package_templates.length; i++) {\n  var package_template = package_templates[i];\n\n  registerI18nTemplate(package_template);\n}\n","var _ = Package.underscore._,\n    package_name = \"telescope-embedly\",\n    namespace = \"telescope-embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n"]}