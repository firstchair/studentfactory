{"version":3,"sources":["telescope-tags/lib/categories.js","telescope-tags/lib/custom_fields.js","telescope-tags/lib/hooks.js","telescope-tags//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/studentfactory/packages/telescope-tags/package-tap.i18n","telescope-tags/lib/server/publications.js","telescope-tags/lib/server/hooks.js","telescope-tags//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/studentfactory/packages/telescope-tags/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;AAAA,kB;AACA,mC;AACA,S;AACA,gB;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,a;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,I;AACA,S;AACA,iB;AACA,kB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,G;AACA,G;;AAEA,iD;AACA,wC;;AAEA,iD;AACA,+C;AACA,gB;AACA,iC;AACA,G;;AAEA,gC;AACA,4C;AACA,kE;AACA,U;AACA,+C;AACA,kG;AACA,I;AACA,C;;AAEA,4B;AACA,oB;AACA,wB;AACA,wB;AACA,uB;AACA,K;AACA,G;;AAEA,qC;AACA,yF;AACA,C;;AAEA,gC;AACA,uC;AACA,E;;AAEA,gD;AACA,mD;AACA,yG;AACA,gD;AACA,G;;;;;;;;;;;;;;;;;;AChEA,qB;AACA,G;AACA,+B;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,iB;AACA,uB;AACA,uB;AACA,8B;AACA,sE;AACA,oB;AACA,kC;AACA,kC;AACA,e;AACA,a;AACA,4B;AACA,S;AACA,O;AACA,K;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;ACtBA,gB;AACA,sB;AACA,sB;AACA,0C;AACA,G;;AAEA,2C;AACA,kB;AACA,6B;AACA,W;AACA,G;AACA,E;AACA,+C;AACA,iB;AACA,6B;AACA,W;AACA,G;;AAEA,gB;AACA,6B;AACA,W;AACA,G;;AAEA,8E;AACA,wC;;;;;;;;;;;;;;;;;;;ACxBA,gH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,yC;AACA,gC;AACA,6B;AACA,G;AACA,Y;AACA,G;;;;;;;;;;;;;;;;;;ACLA,wE;AACA,uC;;AAEA,2C;AACA,yD;AACA,W;AACA,G;;AAEA,gE;AACA,6E;;AAEA,iD;AACA,2E;AACA,G;AACA,E;;AAEA,gD;AACA,wB;;AAEA,c;AACA,G;;AAEA,sD;AACA,+B;AACA,wB;;AAEA,sB;AACA,G;;;;;;;;;;;;;;;;;;;AC3BA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,yN;AACA,gD","file":"/packages/telescope-tags.js","sourcesContent":["// category schema\ncategorySchema = new SimpleSchema({\n  name: {\n    type: String\n  },\n  description: {\n    type: String,\n    optional: true,\n    autoform: {\n      rows: 3\n    }\n  },\n  order: {\n    type: Number,\n    optional: true\n  },\n  slug: {\n    type: String,\n    optional: true\n  },\n  image: {\n    type: String,\n    optional: true\n  }\n});\n\nCategories = new Meteor.Collection(\"categories\");\nCategories.attachSchema(categorySchema);\n\nCategories.before.insert(function (userId, doc) {\n  // if no slug has been provided, generate one\n  if (!doc.slug)\n    doc.slug = slugify(doc.name);\n});\n\n// category post list parameters\nviewParameters.category = function (terms) {\n  var categoryId = Categories.findOne({slug: terms.category})._id;\n  return {\n    find: {'categories': {$in: [categoryId]}} ,\n    options: {sort: {sticky: -1, score: -1}} // for now categories views default to the \"top\" view\n  };\n}\n\nMeteor.startup(function () {\n  Categories.allow({\n    insert: isAdminById,\n    update: isAdminById,\n    remove: isAdminById\n  });\n});\n\ngetPostCategories = function (post) {\n  return !!post.categories ? Categories.find({_id: {$in: post.categories}}).fetch() : [];\n}\n\ngetCategoryUrl = function(slug){\n  return getSiteUrl()+'category/'+slug;\n};\n\n// add callback that adds categories CSS classes\npostClassCallbacks.push(function (post, postClass){\n  var classArray = _.map(getPostCategories(post), function (category){return \"category-\"+category.slug});\n  return postClass + \" \" + classArray.join(' ');\n});","addToPostSchema.push(\n  {\n    propertyName: 'categories',\n    propertySchema: {\n      type: [String],\n      optional: true,\n      editable: true,\n      autoform: {\n        editable: true,\n        noselect: true,\n        options: function () {\n          var categories = Categories.find().map(function (category) {\n            return {\n              value: category._id,\n              label: category.name\n            }  \n          });\n          return categories;\n        }\n      }\n    }\n  }\n);","adminMenu.push({\n  route: 'categories',\n  label: 'Categories',\n  description: 'add_and_remove_categories'\n});\n\n// push \"categories\" modules to postHeading\npostHeading.push({\n  template: 'postCategories',\n  order: 30\n});\n  \n// push \"categoriesMenu\" template to primaryNav\nprimaryNav.push({\n  template: 'categoriesMenu',\n  order: 50\n});\n\nmobileNav.push({\n  template: 'categoriesMenu',\n  order: 10\n});\n\n// we want to wait until categories are all loaded to load the rest of the app\npreloadSubscriptions.push('categories');\n","TAPi18n.packages[\"telescope-tags\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","Meteor.publish('categories', function() {\n  if(can.viewById(this.userId)){\n    return Categories.find();\n  }\n  return [];\n});","// make sure all categories in the post.categories array exist in the db\nvar checkCategories = function (post) {\n\n  // if there are not categories, stop here\n  if (!post.categories || post.categories.length === 0) {\n    return;\n  }\n\n  // check how many of the categories given also exist in the db\n  var categoryCount = Categories.find({_id: {$in: post.categories}}).count();\n\n  if (post.categories.length !== categoryCount) {\n    throw new Meteor.Error('invalid_category', i18n.t('invalid_category'));\n  }\n};\n\npostSubmitMethodCallbacks.push(function (post) {\n  checkCategories(post);\n\n  return post;\n});\n\npostEditMethodCallbacks.push(function (updateObject) {\n  var post = updateObject.$set;\n  checkCategories(post);\n\n  return updateObject;\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope-tags\",\n    namespace = \"telescope-tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"categories\":\"Categorieën\",\"add_and_remove_categories\":\"Voeg toe en verwijderen categorieën.\",\"all_categories\":\"Alle categorieën\",\"invalid_category\":\"Sorry, dit is geen geldige categorie.\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n"]}