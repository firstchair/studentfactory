)]}'
{"version":3,"sources":["telescope-notifications/lib/notifications.js","telescope-notifications/lib/herald.js","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/package-tap.i18n","telescope-notifications/lib/client/templates/notification_item.html","telescope-notifications/lib/client/templates/notification_item.js","telescope-notifications/lib/client/templates/notifications_mark_as_read.html","telescope-notifications/lib/client/templates/notifications_mark_as_read.js","telescope-notifications/lib/client/templates/notification_new_comment.html","telescope-notifications/lib/client/templates/notification_new_reply.html","telescope-notifications/lib/client/templates/notification_post_approved.html","telescope-notifications/lib/client/templates/notifications_menu.html","telescope-notifications/lib/client/templates/notifications_menu.js","telescope-notifications/lib/client/templates/unsubscribe.html","telescope-notifications/lib/client/templates/unsubscribe.js","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/de.i18n.json","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/en.i18n.json","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/es.i18n.json","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/fr.i18n.json","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/it.i18n.json","telescope-notifications//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/klussenbank/packages/telescope-notifications/i18n/zh-CN.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oD;AACA,qD;;AAEA,iG;AACA,yH;;AAEA,sC;AACA,kD;AACA,gE;;AAEA,4D;AACA,6C;AACA,iF;AACA,wC;AACA,4C;AACA,iF;AACA,G;AACA,c;;AAEA,G;;AAEA,yD;AACA,2C;AACA,gF;AACA,c;AACA,G;;AAEA,0D;AACA,2D;AACA,uD;;AAEA,6C;AACA,4B;AACA,sE;AACA,6D;AACA,U;AACA,6B;;AAEA,+B;AACA,2E;AACA,yC;;AAEA,8F;AACA,wC;;AAEA,K;;AAEA,mD;AACA,oC;;AAEA,oE;;AAEA,6F;AACA,yD;AACA,4F;;AAEA,kD;AACA,0F;;AAEA,uG;AACA,mD;;AAEA,O;;AAEA,K;;AAEA,+C;AACA,yF;AACA,6B;;AAEA,gE;AACA,yF;AACA,oG;AACA,kH;;AAEA,sE;;AAEA,K;;AAEA,G;;AAEA,iB;;AAEA,G;;AAEA,0B;AACA,qC;AACA,mB;AACA,kB;AACA,mB;AACA,uB;AACA,e;AACA,sC;AACA,mG;AACA,K;AACA,G;AACA,E;AACA,yC;;AAEA,mE;AACA,yB;AACA,G;AACA,yC;AACA,qB;AACA,oB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,yC;AACA,0C;AACA,gC;AACA,iB;AACA,iB;AACA,mB;AACA,iB;AACA,I;AACA,c;AACA,C;AACA,mD;;;;;;;;;;;;;;;;;;;;AC1HA,mD;AACA,qD;AACA,oC;;AAEA,4B;;AAEA,0B;AACA,0B;AACA,yB;AACA,K;;AAEA,8E;AACA,8E;;AAEA,G;;AAEA,4C;AACA,0B;AACA,mE;AACA,iC;AACA,6D;AACA,yF;AACA,Q;AACA,C;;AAEA,iD;AACA,kD;AACA,a;AACA,+B;AACA,U;AACA,mD;AACA,G;AACA,C;;AAEA,oC;AACA,kD;AACA,a;AACA,6B;AACA,U;AACA,0B;AACA,G;AACA,C;;AAEA,iG;AACA,iG;AACA,iG;;AAEA,8B;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,+E;AACA,2E;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,0D;AACA,G;;AAEA,qC;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,wF;AACA,kF;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,mC;AACA,U;AACA,e;AACA,Y;AACA,oC;AACA,6C;AACA,sE;AACA,gF;AACA,iD;AACA,O;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,iE;AACA,U;AACA,K;AACA,I;AACA,c;AACA,0B;AACA,2C;AACA,uB;AACA,M;AACA,4B;AACA,2C;AACA,yB;AACA,K;AACA,G;AACA,G;;AAEA,iG;AACA,iG;AACA,iG;;AAEA,mE;AACA,+B;AACA,2B;AACA,qD;AACA,I;AACA,+B;AACA,+D;AACA,I;AACA,uB;AACA,wC;AACA,I;AACA,0B;AACA,gC;AACA,I;AACA,oB;AACA,uE;AACA,G;AACA,E;;AAEA,iC;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,+D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;AAEA,+B;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,6D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;AAEA,2C;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,6D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;;;;;;;;;;;;;;;;;;AClLA,yH;;AAEA,+D;AACA,gD;AACA,2C;AACA,mF;AACA,uH;;AAEA,qD;AACA,6B;AACA,yC;;;;;;;;;;;;;;;;;;;;ACTA,yC;AACA,sF;AACA,kB;AACA,kB;AACA,yB;AACA,wE;AACA,mD;AACA,qB;AACA,sB;AACA,W;AACA,K;AACA,0B;AACA,qC;AACA,8C;AACA,gF;AACA,2B;AACA,gC;AACA,mE;AACA,kF;AACA,yB;AACA,I;;;;;;;;;;;;;;;;;;;ACrBA,mD;AACA,yB;AACA,qB;AACA,I;AACA,+B;AACA,0B;AACA,G;AACA,G;;AAEA,kD;AACA,kD;AACA,yC;AACA,6B;AACA,0B;AACA,K;AACA,Y;AACA,kB;AACA,O;AACA,M;AACA,4B;AACA,gB;AACA,2B;AACA,Q;AACA,K;AACA,M;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACzBA,gD;AACA,oG;AACA,kB;AACA,kB;AACA,4B;AACA,a;AACA,c;AACA,kD;AACA,wC;AACA,gE;AACA,O;AACA,I;;;;;;;;;;;;;;;;;;;ACZA,yD;AACA,wC;AACA,uB;AACA,gE;AACA,uC;AACA,8B;AACA,oC;AACA,O;AACA,M;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACTA,+C;AACA,kG;AACA,kB;AACA,kC;AACA,sB;AACA,2D;AACA,K;AACA,6C;AACA,qD;AACA,qD;AACA,yE;AACA,0B;AACA,sB;AACA,+D;AACA,M;AACA,0B;AACA,gD;AACA,wD;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;;ACnBA,6C;AACA,8F;AACA,kB;AACA,kC;AACA,sB;AACA,2D;AACA,K;AACA,6C;AACA,qD;AACA,oD;AACA,kF;AACA,yB;AACA,sB;AACA,+D;AACA,M;AACA,0B;AACA,gD;AACA,wD;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;;ACnBA,iD;AACA,sG;AACA,kB;AACA,6D;AACA,6D;AACA,yB;AACA,sB;AACA,wD;AACA,M;AACA,0B;AACA,gD;AACA,wD;AACA,oD;AACA,qE;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;;ACfA,0C;AACA,wF;AACA,kB;AACA,8B;AACA,qD;AACA,iB;AACA,uD;AACA,c;AACA,kD;AACA,4D;AACA,4D;AACA,sD;AACA,0D;AACA,2C;AACA,Q;AACA,mB;AACA,qE;AACA,iB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACpBA,oD;AACA,0B;AACA,2B;AACA,sH;;AAEA,gC;AACA,kD;AACA,sC;AACA,gD;AACA,U;AACA,wE;AACA,K;;AAEA,8B;AACA,I;AACA,0B;AACA,sH;AACA,0B;AACA,yC;AACA,O;AACA,+B;AACA,yF;AACA,gB;AACA,uC;AACA,4B;AACA,S;AACA,U;AACA,Y;AACA,yB;AACA,K;AACA,qB;AACA,I;AACA,yB;AACA,wB;AACA,oB;AACA,oE;AACA,wB;AACA,Y;AACA,yB;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACxCA,oC;AACA,4E;AACA,kB;AACA,mB;AACA,iD;AACA,oE;AACA,2D;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;ACTA,0D;AACA,4B;AACA,+D;AACA,e;AACA,kG;AACA,U;AACA,+D;AACA,K;AACA,K;AACA,sD;AACA,E;;AAEA,8C;AACA,4B;AACA,8E;AACA,gF;AACA,8C;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;AClBA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,8E;;AAEA,oD;AACA,8C;;AAEA,yC;AACA,C;;;;;;;;;;;;;;;;;;;ACbA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,mjB;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;;;;;;;;;;;;;;;;;;;ACNA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;;;;;;;;;;;;;;;;;;;ACNA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;;;;;;;;;;;;;;;;;;;ACNA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C","file":"/packages/telescope-notifications.js","sourcesContent":["// add new post notification callback on post submit\npostAfterSubmitMethodCallbacks.push(function (post) {\n\n  var adminIds = _.pluck(Meteor.users.find({'isAdmin': true}, {fields: {_id:1}}).fetch(), '_id');\n  var notifiedUserIds = _.pluck(Meteor.users.find({'profile.notifications.posts': 1}, {fields: {_id:1}}).fetch(), '_id');\n\n  // remove post author ID from arrays\n  var adminIds = _.without(adminIds, post.userId);\n  var notifiedUserIds = _.without(notifiedUserIds, post.userId);\n\n  if (post.status === STATUS_PENDING && !!adminIds.length) {\n    // if post is pending, only notify admins\n    Herald.createNotification(adminIds, {courier: 'newPendingPost', data: post});\n  } else if (!!notifiedUserIds.length) {\n    // if post is approved, notify everybody\n    Herald.createNotification(notifiedUserIds, {courier: 'newPost', data: post});\n  }\n  return post;\n\n});\n\n// notify users that their pending post has been approved\npostApproveCallbacks.push(function (post) {\n  Herald.createNotification(post.userId, {courier: 'postApproved', data: post});\n  return post;\n});\n\n// add new comment notification callback on comment submit\ncommentAfterSubmitMethodCallbacks.push(function (comment) {\n  if(Meteor.isServer && !comment.disableNotifications){\n\n    var post = Posts.findOne(comment.postId),\n        notificationData = {\n          comment: _.pick(comment, '_id', 'userId', 'author', 'body'),\n          post: _.pick(post, '_id', 'userId', 'title', 'url')\n        },\n        userIdsNotified = [];\n\n    // 1. Notify author of post\n    // do not notify author of post if they're the ones posting the comment\n    if (comment.userId !== post.userId) {\n\n      Herald.createNotification(post.userId, {courier: 'newComment', data: notificationData});\n      userIdsNotified.push(post.userId);\n\n    }\n\n    // 2. Notify author of comment being replied to\n    if (!!comment.parentCommentId) {\n\n      var parentComment = Comments.findOne(comment.parentCommentId);\n\n      // do not notify author of parent comment if they're also post author or comment author\n      // (someone could be replying to their own comment)\n      if (parentComment.userId !== post.userId && parentComment.userId !== comment.userId) {\n\n        // add parent comment to notification data\n        notificationData.parentComment = _.pick(parentComment, '_id', 'userId', 'author');\n\n        Herald.createNotification(parentComment.userId, {courier: 'newReply', data: notificationData});\n        userIdsNotified.push(parentComment.userId);\n\n      }\n\n    }\n\n    // 3. Notify users subscribed to the thread\n    // TODO: ideally this would be injected from the telescope-subscribe-to-posts package\n    if (!!post.subscribers) {\n\n      // remove userIds of users that have already been notified\n      // and of comment author (they could be replying in a thread they're subscribed to)\n      var subscriberIdsToNotify = _.difference(post.subscribers, userIdsNotified, [comment.userId]);\n      Herald.createNotification(subscriberIdsToNotify, {courier: 'newCommentSubscribed', data: notificationData});\n\n      userIdsNotified = userIdsNotified.concat(subscriberIdsToNotify);\n\n    }\n\n  }\n\n  return comment;\n\n});\n\nvar emailNotifications = {\n  propertyName: 'emailNotifications',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n    autoform: {\n      group: 'notifications_fieldset',\n      instructions: 'Enable email notifications for new posts and new comments (requires restart).'\n    }\n  }\n};\nSettings.addToSchema(emailNotifications);\n\n// make it possible to disable notifications on a per-comment basis\naddToCommentsSchema.push(\n  {\n    propertyName: 'disableNotifications',\n    propertySchema: {\n      type: Boolean,\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  }\n);\n\nfunction setNotificationDefaults (user) {\n  // set notifications default preferences\n  user.profile.notifications = {\n    users: false,\n    posts: false,\n    comments: true,\n    replies: true\n  };\n  return user;\n}\nuserCreatedCallbacks.push(setNotificationDefaults);\n","\n// send emails every second when in dev environment\nif (Meteor.absoluteUrl().indexOf('localhost') !== -1)\n  Herald.settings.queueTimer = 1000;\n\nMeteor.startup(function () {\n\n  Herald.collection.deny({\n    update: !can.editById,\n    remove: !can.editById\n  });\n\n  // disable all email notifications when \"emailNotifications\" is set to false\n  Herald.settings.overrides.email = !Settings.get('emailNotifications', true);\n\n});\n\nvar commentEmail = function (userToNotify) {\n  var notification = this;\n  // put in setTimeout so it doesn't hold up the rest of the method\n  Meteor.setTimeout(function () {\n    notificationEmail = buildEmailNotification(notification);\n    sendEmail(getEmail(userToNotify), notificationEmail.subject, notificationEmail.html);\n  }, 1);\n}\n\nvar getCommenterProfileUrl = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if (user) {\n    return getProfileUrl(user);\n  } else {\n    return getProfileUrlBySlugOrId(comment.userId);\n  }\n}\n\nvar getAuthor = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if (user) {\n    return getUserName(user);\n  } else {\n    return comment.author;\n  }\n}\n\n// ------------------------------------------------------------------------------------------- //\n// -----------------------------------------  Posts ------------------------------------------ //\n// ------------------------------------------------------------------------------------------- //\n\nHerald.addCourier('newPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has created a new post: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n  // message: function (user) { return 'email template?' }\n});\n\nHerald.addCourier('newPendingPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has a new post pending approval: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPendingPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n});\n\nHerald.addCourier('postApproved', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = 'Your post “'+p.postTitle+'” has been approved';\n        var html = buildEmailTemplate(getEmailTemplate('emailPostApproved')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationPostApproved')];\n      }));\n    }\n  },\n  transform: {\n    postUrl: function () {\n      var p = getPostProperties(this.data);\n      return p.postUrl;\n    },\n    postTitle: function () {\n      var p = getPostProperties(this.data);\n      return p.postTitle;\n    }\n  }\n});\n\n// ------------------------------------------------------------------------------------------- //\n// ---------------------------------------- Comments ----------------------------------------- //\n// ------------------------------------------------------------------------------------------- //\n\n// specify how to get properties used in template from comment data\nvar commentCourierTransform = {\n  profileUrl: function () {\n    return getCommenterProfileUrl(this.data.comment);\n  },\n  postCommentUrl: function () {\n    return Router.path('post_page', {_id: this.data.post._id});\n  },\n  author: function () {\n    return getAuthor(this.data.comment);\n  },\n  postTitle: function () {\n    return this.data.post.title;\n  },\n  url: function () {\n    return Router.path('comment_reply', {_id: this.parentComment._id});\n  }\n};\n\nHerald.addCourier('newComment', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewComment')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});\n\nHerald.addCourier('newReply', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewReply')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});\n\nHerald.addCourier('newCommentSubscribed', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewReply')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});\n","TAPi18n.packages[\"telescope-notifications\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n// define the package's templates registrar\nregisterI18nTemplate = TAPi18n._getRegisterHelpersProxy(\"telescope-notifications\");\nregisterTemplate = registerI18nTemplate; // XXX OBSOLETE, kept for backward compatibility will be removed in the future\n\n// Record the list of templates prior to package load\nvar _ = Package.underscore._;\nnon_package_templates = _.keys(Template);\n","\nTemplate.__checkName(\"notificationItem\");\nTemplate[\"notificationItem\"] = new Template(\"Template.notificationItem\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ \"dropdown-item notification-item \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"read\"));\n      }, function() {\n        return \"read\";\n      }) ];\n    }\n  }, \"\\n    \", HTML.SPAN({\n    \"class\": \"notification-timestamp\"\n  }, Blaze.View(\"lookup:timeAgo\", function() {\n    return Spacebars.mustache(view.lookup(\"timeAgo\"), view.lookup(\"timestamp\"));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": \"notification-html\"\n  }, \"\\n      \", Blaze.View(\"lookup:notificationHTML\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"notificationHTML\")));\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Template[getTemplate('notificationItem')].helpers({\n  properties: function(){\n    return this.data;\n  },\n  notificationHTML: function(){\n    return this.message();\n  }\n});\n\nTemplate[getTemplate('notificationItem')].events({\n  'click .action-link': function(event, instance){\n    var notificationId=instance.data._id;\n    Herald.collection.update(\n    {_id: notificationId},\n    {\n      $set:{\n        read: true\n      }\n    },\n    function(error, result){\n      if(error){\n        console.log(error);\n      } \n    }\n  );  \n  }\n});\n","\nTemplate.__checkName(\"notificationsMarkAsRead\");\nTemplate[\"notificationsMarkAsRead\"] = new Template(\"Template.notificationsMarkAsRead\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": \"dropdown-item\"\n  }, HTML.A({\n    href: \"#\",\n    \"class\": \"button mark-as-read btn btn-primary\"\n  }, Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"mark_as_read\");\n  })));\n}));\n","Template[getTemplate('notificationsMarkAsRead')].events({\n  'click .mark-as-read': function(e, t){\n    e.preventDefault();\n    t.$('li').parents('.dropdown').removeClass('dropdown-open');\n    Meteor.call('heraldMarkAllAsRead', \n      function(error, result){\n        error && console.log(error);\n      }\n    );\n  }\n});\n","\nTemplate.__checkName(\"notificationNewComment\");\nTemplate[\"notificationNewComment\"] = new Template(\"Template.notificationNewComment\", (function() {\n  var view = this;\n  return HTML.P(\"\\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"profileUrl\"));\n    }\n  }, Blaze.View(\"lookup:author\", function() {\n    return Spacebars.mustache(view.lookup(\"author\"));\n  })), \" \\n    \", Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"left_a_new_comment_on\");\n  }), \"  \\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"postCommentUrl\"));\n    },\n    \"class\": \"action-link\"\n  }, Blaze.View(\"lookup:postTitle\", function() {\n    return Spacebars.mustache(view.lookup(\"postTitle\"));\n  })), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"notificationNewReply\");\nTemplate[\"notificationNewReply\"] = new Template(\"Template.notificationNewReply\", (function() {\n  var view = this;\n  return HTML.P(\"\\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"profileUrl\"));\n    }\n  }, Blaze.View(\"lookup:author\", function() {\n    return Spacebars.mustache(view.lookup(\"author\"));\n  })), \"\\n    \", Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"has_replied_to_your_comment_on\");\n  }), \" \\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"postCommentUrl\"));\n    },\n    \"class\": \"action-link\"\n  }, Blaze.View(\"lookup:postTitle\", function() {\n    return Spacebars.mustache(view.lookup(\"postTitle\"));\n  })), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"notificationPostApproved\");\nTemplate[\"notificationPostApproved\"] = new Template(\"Template.notificationPostApproved\", (function() {\n  var view = this;\n  return HTML.P(\"\\n    \", Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"your_post\");\n  }), \" \\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"postUrl\"));\n    },\n    \"class\": \"action-link\"\n  }, Blaze.View(\"lookup:postTitle\", function() {\n    return Spacebars.mustache(view.lookup(\"postTitle\"));\n  })), \"\\n    \", Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"has_been_approved\");\n  }), \" \\n  \");\n}));\n","\nTemplate.__checkName(\"notificationsMenu\");\nTemplate[\"notificationsMenu\"] = new Template(\"Template.notificationsMenu\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isLoggedIn\"));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return {\n        menuName: Spacebars.call(\"notifications\"),\n        menuLabel: Spacebars.call(view.lookup(\"menuLabel\")),\n        menuItems: Spacebars.call(view.lookup(\"menuItems\")),\n        menuClass: Spacebars.call(\"header-submodule\"),\n        menuMode: Spacebars.call(view.lookup(\"menuMode\")),\n        menuCollapsed: Spacebars.call(true)\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"menuComponent\"));\n    }), \"\\n  \" ];\n  });\n}));\n","Template[getTemplate('notificationsMenu')].helpers({\n  menuLabel: function () {\n    var notificationsCount;\n    var notifications=Herald.collection.find({userId: Meteor.userId(), read: false}, {sort: {timestamp: -1}}).fetch();\n\n    if(notifications.length==0){\n      notificationsCount = __('no_notifications');\n    }else if(notifications.length==1){\n      notificationsCount = __('1_notification');\n    }else{\n      notificationsCount = notifications.length+' '+__('notifications');\n    }\n\n    return notificationsCount;\n  },\n  menuItems: function () {\n    var notifications=Herald.collection.find({userId: Meteor.userId(), read: false}, {sort: {timestamp: -1}}).fetch();\n    var markAllAsRead = [{\n      template: 'notificationsMarkAsRead'\n    }];\n    if (notifications.length) {\n      var menuItems = markAllAsRead.concat(_.map(notifications, function (notification) {\n        return {\n          template: \"notificationItem\",\n          data: notification\n        }\n      }));\n    } else {\n      var menuItems = [];\n    }\n    return menuItems;\n  },\n  menuMode: function () {\n    if (!!this.mobile) {\n      return 'list';\n    } else if (Settings.get('navLayout', 'top-nav') === 'top-nav') {\n      return 'dropdown';\n    } else {\n      return 'accordion';\n    }\n  }\n});\n","\nTemplate.__checkName(\"unsubscribe\");\nTemplate[\"unsubscribe\"] = new Template(\"Template.unsubscribe\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"grid-small grid-block dialog admin\"\n  }, \"\\n    \", HTML.P(Blaze.View(\"lookup:unsubscribed\", function() {\n    return Spacebars.mustache(view.lookup(\"unsubscribed\"));\n  })), \"\\n  \");\n}));\n","Template[getTemplate('unsubscribe')].created = function(){\n  var hash = this.data.hash;\n  Meteor.call('unsubscribeUser', hash, function(error, result){\n    if(result){\n      Session.set('unsubscribedMessage', __('you_have_been_unsubscribed_from_all_notifications'));\n    }else{\n      Session.set('unsubscribedMessage', __('user_not_found'));\n    }\n  });\n  trackEvent('notificationsUnsubcribe', {hash: hash});\n};\n\nTemplate[getTemplate('unsubscribe')].helpers({\n  unsubscribed : function(){\n    // we have to use a session variable because the string we want to display\n    // depends on the return value of an asynchronous callback (unsubscribeUser)\n    return Session.get('unsubscribedMessage');\n  }\n});","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nvar package_templates = _.difference(_.keys(Template), non_package_templates);\n\nfor (var i = 0; i < package_templates.length; i++) {\n  var package_template = package_templates[i];\n\n  registerI18nTemplate(package_template);\n}\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\",\"notifications_fieldset\":\"Notifications\",\"emailNotifications\":\"Email Notifications\",\"your_post\":\"Your post\",\"has_been_approved\":\"has been approved\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n"]}