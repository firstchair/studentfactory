)]}'
{"version":3,"sources":["miro:mailchimp/lib/client/views/subscribe/subscribe.html","miro:mailchimp/lib/client/views/subscribe/subscribe.js","miro:mailchimp/lib/client/mailchimp.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+C;AACA,kG;AACA,kB;AACA,8C;AACA,kD;AACA,iB;AACA,6B;AACA,wB;AACA,8B;AACA,wD;AACA,iB;AACA,2J;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,oD;AACA,qD;AACA,0C;AACA,6C;AACA,wD;;AAEA,gB;AACA,gB;AACA,iB;;AAEA,qC;AACA,yB;AACA,sC;AACA,G;AACA,G;;AAEA,kD;AACA,2C;AACA,uK;;AAEA,iC;AACA,G;;AAEA,oD;AACA,qF;AACA,oC;;AAEA,yB;AACA,oC;AACA,I;AACA,U;AACA,mC;;AAEA,uC;AACA,yC;AACA,gC;AACA,oC;AACA,I;AACA,G;AACA,G;;AAEA,uD;AACA,uD;;AAEA,uC;AACA,I;AACA,gD;AACA,Y;AACA,iB;AACA,K;AACA,K;;AAEA,+B;AACA,kB;AACA,6B;AACA,oC;AACA,4C;AACA,a;AACA,2C;AACA,iD;AACA,a;AACA,sC;AACA,+B;AACA,0C;AACA,c;AACA,+C;AACA,M;;AAEA,gE;;AAEA,Y;;AAEA,oG;AACA,qE;;AAEA,qC;AACA,K;;AAEA,oC;AACA,kC;AACA,I;AACA,I;AACA,G;;AAEA,2C;AACA,kC;AACA,kC;;AAEA,sC;;AAEA,iD;;AAEA,2B;AACA,uB;AACA,G;;AAEA,wD;AACA,2C;AACA,yC;AACA,6C;AACA,4D;AACA,E;;AAEA,yC;AACA,sB;AACA,0B;AACA,E;AACA,G;;AAEA,wC;AACA,2D;AACA,8B;AACA,gC;AACA,S;AACA,G;;AAEA,iC;AACA,+C;;AAEA,M;AACA,iC;AACA,6B;AACA,K;AACA,4B;AACA,iC;AACA,U;AACA,G;AACA,G;;AAEA,oC;AACA,+C;;AAEA,2B;AACA,gC;AACA,wD;AACA,oC;AACA,yB;AACA,K;AACA,I;AACA,S;AACA,G;;AAEA,qC;AACA,+B;AACA,uD;AACA,wB;AACA,G;AACA,E;AACA,G;;;;;;;;;;;;;;;;;;;ACpJA,0C;AACA,kB;AACA,mE;AACA,kB;AACA,G;AACA,E;;AAEA,4E;AACA,kD;;AAEA,qB;AACA,e;AACA,8D;AACA,kE;AACA,I;;AAEA,S;AACA,U;AACA,E;;AAEA,0B;AACA,gB;AACA,U;AACA,S;AACA,mB;AACA,U;AACA,G;AACA,E","file":"/packages/miro:mailchimp.js","sourcesContent":["\nTemplate.__checkName(\"MailChimpListSubscribe\");\nTemplate[\"MailChimpListSubscribe\"] = new Template(\"Template.MailChimpListSubscribe\", (function() {\n  var view = this;\n  return HTML.DIV(\"\\n\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"message\"));\n  }, function() {\n    return [ \"\\n\t\t\", HTML.P({\n      \"class\": \"message\"\n    }, Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"message\"));\n    })), \"\\n\t\" ];\n  }), HTML.Raw('\\n\t\t<input class=\"email\" type=\"email\" placeholder=\"email@example.com\">\\n\t\t<button class=\"subscribe\" type=\"button\">Subscribe</button>\\n\t'));\n}));\n","var subscribeMessage\t\t\t= 'Get on the mailing list:',\n\tsubscribeInvalidEmail\t\t= 'Invalid email address :(',\n\tsubscribeSubscribing\t\t= 'Subscribing...',\n\tsubscribeSuccess\t\t\t= 'Check your inbox! :)',\n\tsubscribeAlreadySubscribed\t= 'Already subscribed! O.o',\n\n\tsubscribeTitle,\n\tsubscribeEmail,\n\tsubscribeButton,\n\n\tshowMessage = function ( message ) {\n\t\tif ( subscribeTitle ) {\n\t\t\tsubscribeTitle.innerHTML = message;\n\t\t}\n\t},\n\n\tisValidEmailAddress = function ( emailAddress ) {\n\t\t// http://stackoverflow.com/a/46181/11236\n\t\tvar re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n\t\treturn re.test( emailAddress );\n\t},\n\n\tvalidateEmailAddress = function ( updateMessage ) {\n\t\tif ( subscribeEmail.value !== '' && isValidEmailAddress( subscribeEmail.value ) ) {\n\t\t\tsubscribeButton.disabled = false;\n\n\t\t\tif ( updateMessage ) {\n\t\t\t\tshowMessage( subscribeMessage );\n\t\t\t}\n\t\t} else {\n\t\t\tsubscribeButton.disabled = true;\n\n\t\t\tif ( subscribeEmail.value !== '' ) {\n\t\t\t\tshowMessage( subscribeInvalidEmail );\n\t\t\t} else if ( updateMessage ) {\n\t\t\t\tshowMessage( subscribeMessage );\n\t\t\t}\n\t\t}\n\t},\n\n\tmailChimpListSubscribe = function ( email, list_id ) {\n\t\tvar mailChimp = new MailChimp(/* apiKey, options */);\n\n\t\tmailChimp.call( 'lists', 'subscribe',\n\t\t\t{\n\t\t\t\tid   : list_id,\t\t// null -> defined @ server\n\t\t\t\temail: {\n\t\t\t\t\temail: email\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfunction ( error, result ) {\n\t\t\t\tif ( error ) {\n\t\t\t\t\tswitch ( error.error ) {\n\t\t\t\t\t\tcase 232:\t// 'Email_NotExists'\n\t\t\t\t\t\t\tshowMessage( subscribeInvalidEmail );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 214:\t// 'List_AlreadySubscribed'\n\t\t\t\t\t\t\tshowMessage( subscribeAlreadySubscribed );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 200:\t// 'List_DoesNotExist'\n\t\t\t\t\t\t\t// We shouldn't be here!\n\t\t\t\t\t\t\t// Oh, well, continue to default...\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tshowMessage( 'Error: ' + error.reason );\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.error( '[MailChimp][Subscribe] Error: %o', error );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.info( '[MailChimp][Subscribe] Yo, ' + subscribeEmail.value + ', ' + subscribeSuccess );\n\t\t\t\t\tconsole.info( '[MailChimp][Subscribe] Subscriber: %o', result );\n\n\t\t\t\t\tshowMessage( subscribeSuccess );\n\t\t\t\t}\n\n\t\t\t\tsubscribeEmail.disabled = false;\n\t\t\t\tvalidateEmailAddress( false );\n\t\t\t}\n\t\t);\n\t},\n\n\tsubscribeGo = function ( eventBubbling ) {\n\t\tsubscribeEmail.disabled  = true;\n\t\tsubscribeButton.disabled = true;\n\n\t\tshowMessage( subscribeSubscribing );\n\n\t\tmailChimpListSubscribe( subscribeEmail.value );\n\n\t\t// Prevent Event Bubbling\n\t\treturn eventBubbling;\n\t};\n\nTemplate.MailChimpListSubscribe.rendered = function () {\n\tsubscribeTitle  = this.find( '.message' );\n\tsubscribeEmail  = this.find( '.email' );\n\tsubscribeButton = this.find( '.subscribe' );\n\tsubscribeButton.disabled = ( subscribeEmail.value === '' );\n};\n\nTemplate.MailChimpListSubscribe.helpers({\n\tmessage: function() {\n\t\treturn subscribeMessage;\n\t}\n});\n\nTemplate.MailChimpListSubscribe.events({\n\t'focus .email, paste .email, cut .email': function ( e ) {\n\t\tsetTimeout( function ( e ) {\n\t\t\tvalidateEmailAddress( true );\n\t\t}, 0 );\n\t},\n\n\t'keyup .email': function ( e ) {\n\t\tvar key = e.which || e.keyCode || e.charCode;\n\n\t\tif (\n\t\t\tkey === 8 ||\t\t\t\t// [Backspace]\n\t\t\tkey === 46\t\t\t\t\t// [Delete]\n\t\t) {\n\t\t\tsetTimeout( function () {\n\t\t\t\tvalidateEmailAddress( true );\n\t\t\t}, 0 );\n\t\t}\n\t},\n\n\t'keypress .email': function ( e ) {\n\t\tvar key = e.which || e.keyCode || e.charCode;\n\n\t\tsetTimeout( function () {\n\t\t\tvalidateEmailAddress( true );\n\t\t\tif ( isValidEmailAddress( subscribeEmail.value  ) ) {\n\t\t\t\tif ( key === 13\t) {\t\t// [Return]\n\t\t\t\t\tsubscribeGo( true );\n\t\t\t\t}\n\t\t\t}\n\t\t}, 0 );\n\t},\n\n\t'click .subscribe': function ( e ) {\n\t\tvalidateEmailAddress( true );\n\t\tif ( isValidEmailAddress( subscribeEmail.value  ) ) {\n\t\t\tsubscribeGo( false );\n\t\t}\n\t}\n});\n","MailChimp = function ( apiKey, options ) {\n\tthis._options = {\n\t\tapiKey : ( apiKey ) ? apiKey : Session.get( 'MailChimp.apiKey' ),\n\t\toptions: options\n\t};\n};\n\nMailChimp.prototype.call = function ( section, method, options, callback ) {\n\tvar mailChimpOptions = _.defaults( {}, options );\n\n\tswitch ( section ) {\n\t\tcase 'lists':\n\t\t\tif ( !mailChimpOptions.id || mailChimpOptions.id === '' ) {\n\t\t\t\tmailChimpOptions.id = Session.get( 'MailChimp.lists.listId' );\n\t\t\t}\n\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\tMeteor.call( 'MailChimp',\n\t\tthis._options,\n\t\tsection,\n\t\tmethod,\n\t\tmailChimpOptions,\n\t\tcallback\n\t);\n};\n"]}