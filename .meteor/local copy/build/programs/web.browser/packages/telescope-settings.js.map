)]}'
{"version":3,"sources":["telescope-settings/lib/settings.js","telescope-settings/lib/router.js","telescope-settings/lib/client/language_changer.js","telescope-settings/lib/client/helpers.js","telescope-settings/lib/client/templates/settings_form.html","telescope-settings/lib/client/templates/settings_form.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,Y;AACA,+C;AACA,E;;AAEA,oC;AACA,U;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,uB;AACA,gG;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,uB;AACA,c;AACA,gE;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,kC;AACA,e;AACA,uB;AACA,gF;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,uB;AACA,wD;AACA,gB;AACA,yC;AACA,0C;AACA,O;AACA,K;AACA,I;AACA,sB;AACA,kB;AACA,mB;AACA,e;AACA,uB;AACA,sC;AACA,K;AACA,I;AACA,sB;AACA,kB;AACA,mB;AACA,e;AACA,uB;AACA,sC;AACA,K;AACA,I;AACA,yB;AACA,kB;AACA,mB;AACA,e;AACA,uB;AACA,sD;AACA,yC;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,yE;AACA,mB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,wE;AACA,mB;AACA,K;AACA,I;AACA,wB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,uB;AACA,kF;AACA,mB;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,uD;AACA,4B;AACA,iD;AACA,kB;AACA,4C;AACA,6B;AACA,Y;AACA,W;AACA,O;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,qD;AACA,gB;AACA,6C;AACA,4C;AACA,O;AACA,K;AACA,I;AACA,c;AACA,mB;AACA,mB;AACA,e;AACA,qB;AACA,2D;AACA,qB;AACA,qB;AACA,4B;AACA,gD;AACA,kB;AACA,8B;AACA,6B;AACA,W;AACA,W;AACA,O;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,qB;AACA,6E;AACA,K;AACA,I;AACA,oB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,wB;AACA,gF;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,qB;AACA,uF;AACA,K;AACA,I;AACA,sB;AACA,iB;AACA,oB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,qB;AACA,mB;AACA,e;AACA,oB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,mB;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,mB;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,mB;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,mB;AACA,K;AACA,I;AACA,a;AACA,iB;AACA,uB;AACA,mB;AACA,e;AACA,uB;AACA,gE;AACA,4B;AACA,4E;AACA,kB;AACA,uB;AACA,4B;AACA,W;AACA,W;AACA,wB;AACA,O;AACA,K;AACA,I;AACA,kB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,uE;AACA,a;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,kD;AACA,K;AACA,I;AACA,wB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,2C;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,yD;AACA,K;AACA,I;AACA,2B;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,2C;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,gG;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,sE;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,sB;AACA,iB;AACA,mB;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,yD;AACA,a;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,6E;AACA,a;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,gG;AACA,c;AACA,mB;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,yE;AACA,c;AACA,mB;AACA,K;AACA,I;AACA,U;AACA,kB;AACA,mB;AACA,e;AACA,qB;AACA,qE;AACA,K;AACA,I;AACA,gB;AACA,mB;AACA,mB;AACA,e;AACA,oB;AACA,qB;AACA,qB;AACA,gB;AACA,S;AACA,yB;AACA,iC;AACA,U;AACA,S;AACA,2B;AACA,0B;AACA,U;AACA,S;AACA,4B;AACA,2B;AACA,S;AACA,Q;AACA,oE;AACA,K;AACA,G;AACA,G;;AAEA,kD;;AAEA,uC;AACA,sB;AACA,sD;;AAEA,+C;AACA,kE;AACA,E;;AAEA,gD;AACA,uD;;AAEA,sH;AACA,oC;;AAEA,gI;AACA,2C;;AAEA,oG;AACA,6B;;AAEA,0E;AACA,yB;;AAEA,iC;AACA,qB;AACA,G;AACA,E;;AAEA,uD;AACA,uB;AACA,kE;AACA,I;;AAEA,4B;AACA,6B;AACA,wB;AACA,wB;AACA,uB;AACA,K;AACA,G;;AAEA,4B;AACA,gE;AACA,4F;AACA,uC;AACA,G;;;;;;;;;;;;;;;;;;;ACjcA,4B;AACA,a;;AAEA,6B;AACA,gC;AACA,qB;AACA,kD;AACA,uB;AACA,iD;;AAEA,mD;AACA,c;AACA,gC;AACA,0B;AACA,Q;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;ACjBA,uC;;AAEA,sB;AACA,gC;AACA,wB;AACA,mC;AACA,I;AACA,kC;AACA,wB;AACA,mC;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACXA,4B;;AAEA,yE;AACA,mD;AACA,iB;AACA,G;;;;;;;;;;;;;;;;;;;;ACJA,iC;AACA,sE;AACA,kB;AACA,8B;AACA,0E;AACA,iB;AACA,uD;AACA,c;AACA,0D;AACA,iD;AACA,uC;AACA,yE;AACA,uD;AACA,sD;AACA,6C;AACA,Q;AACA,mB;AACA,iE;AACA,iB;AACA,iB;AACA,uD;AACA,c;AACA,0D;AACA,iD;AACA,uC;AACA,8C;AACA,uD;AACA,qD;AACA,Q;AACA,mB;AACA,iE;AACA,iB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AClCA,iE;AACA,4C;AACA,oE;AACA,M;;AAEA,oD;AACA,oE;AACA,K;AACA,G;;AAEA,gB;AACA,uB;AACA,a;AACA,kC;AACA,mE;AACA,wB;AACA,O;AACA,K;;AAEA,I;AACA,uB;AACA,a;AACA,6B;AACA,mE;AACA,mB;AACA,O;AACA,K;AACA,G;AACA,G","file":"/packages/telescope-settings.js","sourcesContent":["Settings = {\n  collection: new Meteor.Collection(\"settings\")\n};\n\nSettings.schema = new SimpleSchema({\n  title: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'general'\n    }\n  },\n  siteUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'general',\n      instructions: 'Your site\\'s URL (with trailing \"/\"). Will default to Meteor.absoluteUrl()'\n    }\n  },\n  tagline: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'general'\n    }\n  },\n  description: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'general',\n      rows: 5,\n      instructions: 'A short description used for SEO purposes.'\n    }\n  },\n  siteImage: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Url,\n    autoform: {\n      group: \"general\",\n      instructions: \"URL to an image for the open graph image tag for all pages\"\n    }\n  },\n  navLayout: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'general',\n      instructions: 'The layout used for the main menu',\n      options: [\n        {value: 'top-nav', label: 'Top'},\n        {value: 'side-nav', label: 'Side'}\n      ]\n    }\n  },\n  requireViewInvite: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'invites',\n      leftLabel: 'Require View Invite'\n    }\n  },\n  requirePostInvite: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'invites',\n      leftLabel: 'Require Post Invite'\n    }\n  },\n  requirePostsApproval: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'general',\n      instructions: \"Posts must be approved by admin\",\n      leftLabel: \"Require Posts Approval\"\n    }\n  },\n  defaultEmail: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'email',\n      instructions: 'The address all outgoing emails will be sent from.',\n      private: true\n    }\n  },\n  mailUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'email',\n      instructions: 'MAIL_URL environment variable (requires restart).',\n      private: true\n    }\n  },\n  scoreUpdateInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    autoform: {\n      group: 'scoring',\n      instructions: 'How often to recalculate scores, in seconds (default to 30)',\n      private: true\n    }\n  },\n  defaultView: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'posts',\n      instructions: 'The view used for the front page',\n      options: function () {\n        return _.map(viewsMenu, function (view) {\n          return {\n            value: camelCaseify(view.label),\n            label: view.label\n          };\n        });\n      }\n    }\n  },\n  postsLayout: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'posts',\n      instructions: 'The layout used for post lists',\n      options: [\n        {value: 'posts-list', label: 'List'},\n        {value: 'posts-grid', label: 'Grid'}\n      ]\n    }\n  },\n  postViews: {\n    type: [String],\n    optional: true,\n    autoform: {\n      group: 'posts',\n      instructions: 'Posts views showed in the views menu',\n      editable: true,\n      noselect: true,\n      options: function () {\n        return _.map(viewsMenu, function (item){\n          return {\n            value: item.route,\n            label: item.label\n          }\n        });\n      }\n    }\n  },\n  postInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    autoform: {\n      group: 'posts',\n      instructions: 'Minimum time between posts, in seconds (defaults to 30)'\n    }\n  },\n  commentInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 15,\n    autoform: {\n      group: 'comments',\n      instructions: 'Minimum time between comments, in seconds (defaults to 15)'\n    }\n  },\n  maxPostsPerDay: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    autoform: {\n      group: 'posts',\n      instructions: 'Maximum number of posts a user can post in a day (default to 30).'\n    }\n  },\n  startInvitesCount: {\n    type: Number,\n    defaultValue: 3,\n    optional: true,\n    autoform: {\n      group: 'invites'\n    }\n  },\n  postsPerPage: {\n    type: Number,\n    defaultValue: 10,\n    optional: true,\n    autoform: {\n      group: 'posts'\n    }\n  },\n  logoUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'logo'\n    }\n  },\n  logoHeight: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'logo'\n    }\n  },\n  logoWidth: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'logo'\n    }\n  },\n  faviconUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'logo'\n    }\n  },\n  language: {\n    type: String,\n    defaultValue: 'en',\n    optional: true,\n    autoform: {\n      group: 'general',\n      instructions: 'The app\\'s language. Defaults to English.',\n      options: function () {\n        var languages = _.map(TAPi18n.getLanguages(), function (item, key) {\n          return {\n            value: key,\n            label: item.name\n          }\n        });\n        return languages\n      }\n    }\n  },\n  backgroundCSS: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'CSS code for the <body>\\'s \"background\" property',\n      rows: 5\n    }\n  },\n  accentColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'colors',\n      instructions: 'Used for button backgrounds.'\n    }\n  },\n  accentContrastColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'colors',\n      instructions: 'Used for button text.'\n    }\n  },\n  secondaryColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'colors',\n      instructions: 'Used for the navigation background.'\n    }\n  },\n  secondaryContrastColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'colors',\n      instructions: 'Used for header text.'\n    }\n  },\n  fontUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'fonts',\n      instructions: '@import URL (e.g. https://fonts.googleapis.com/css?family=Source+Sans+Pro)'\n    }\n  },\n  fontFamily: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'fonts',\n      instructions: 'font-family (e.g. \"Source Sans Pro\", sans-serif)'\n    }\n  },\n  twitterAccount: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'integrations'\n    }\n  },\n  googleAnalyticsId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'integrations'\n    }\n  },\n  mixpanelId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'integrations'\n    }\n  },\n  clickyId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'integrations'\n    }\n  },\n  footerCode: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'Footer content (accepts Markdown).',\n      rows: 5\n    }\n  },\n  extraCode: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'Any extra HTML code you want to include on every page.',\n      rows: 5\n    }\n  },\n  emailFooter: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'email',\n      instructions: 'Content that will appear at the bottom of outgoing emails (accepts HTML).',\n      rows: 5,\n      private: true\n    }\n  },\n  notes: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'You can store any notes or extra information here.',\n      rows: 5,\n      private: true\n    }\n  },\n  debug: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'debug',\n      instructions: 'Enable debug mode for more details console logs'\n    }\n  },\n  authMethods: {\n    type: [String],\n    optional: true,\n    autoform: {\n      group: 'auth',\n      editable: true,\n      noselect: true,\n      options: [\n        {\n          value: 'email',\n          label: 'Email/Password'\n        },\n        {\n          value: 'twitter',\n          label: 'Twitter'\n        },\n        {\n          value: 'facebook',\n          label: 'Facebook'\n        }\n      ],\n      instructions: 'Authentication methods (default to email only)'\n    }\n  }\n});\n\nSettings.collection.attachSchema(Settings.schema);\n\nSettings.addToSchema = function(item) {\n  var itemSchema = {};\n  itemSchema[item.propertyName] = item.propertySchema;\n\n  Settings.collection.attachSchema(itemSchema);\n  Settings.schema = new SimpleSchema(Settings.schema, itemSchema);\n};\n\nSettings.get = function(setting, defaultValue) {\n  var settings = Settings.collection.find().fetch()[0];\n\n  if (Meteor.isServer && Meteor.settings && !!Meteor.settings[setting]) { // if on the server, look in Meteor.settings\n    return Meteor.settings[setting];\n\n  } else if (Meteor.settings && Meteor.settings.public && !!Meteor.settings.public[setting]) { // look in Meteor.settings.public\n    return Meteor.settings.public[setting];\n\n  } else if(settings && (typeof settings[setting] !== 'undefined')) { // look in Settings collection\n    return settings[setting];\n\n  } else if (typeof defaultValue !== 'undefined') { // fallback to default\n    return  defaultValue;\n\n  } else { // or return undefined\n    return undefined;\n  }\n};\n\n// use custom template for checkboxes - not working yet\n// if(Meteor.isClient){\n//   AutoForm.setDefaultTemplateForType('afCheckbox', 'settings');\n// }\n\nMeteor.startup(function () {\n  Settings.collection.allow({\n    insert: isAdminById,\n    update: isAdminById,\n    remove: isAdminById\n  });\n});\n\nMeteor.startup(function () {\n  // override Meteor.absoluteUrl() with URL provided in settings\n  Meteor.absoluteUrl.defaultOptions.rootUrl = Settings.get('siteUrl', Meteor.absoluteUrl());\n  debug = Settings.get('debug', false);\n});\n","Meteor.startup(function () {\n  // Settings\n\n  Router.route('/settings', {\n    controller: AdminController,\n    name: 'settings',\n    // layoutTemplate: getTemplate('adminLayout'),\n    data: function () {\n      // we only have one set of settings for now\n\n      var settings = Settings.collection.findOne();\n      return {\n        hasSettings: !!settings,\n        settings: settings\n      };\n    }\n  });\n});\n","var query = Settings.collection.find();\n\nquery.observeChanges({\n  added: function (id, fields) {\n    if (fields.language)\n      setLanguage(fields.language);\n  },\n  changed: function (id, fields) {\n    if (fields.language)\n      setLanguage(fields.language);\n  }\n});\n","/* global Settings: false */\n\nTemplate.registerHelper('getSetting', function(setting, defaultArgument){\n  setting = Settings.get(setting, defaultArgument);\n  return setting;\n});\n","\nTemplate.__checkName(\"settings\");\nTemplate[\"settings\"] = new Template(\"Template.settings\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"hasSettings\"));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return {\n        collection: Spacebars.call(\"Settings.collection\"),\n        id: Spacebars.call(\"updateSettingsForm\"),\n        type: Spacebars.call(\"update\"),\n        doc: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"settings\")),\n        \"label-class\": Spacebars.call(\"control-label\"),\n        \"input-col-class\": Spacebars.call(\"controls\"),\n        template: Spacebars.call(\"telescope\")\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"quickForm\"));\n    }), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return {\n        collection: Spacebars.call(\"Settings.collection\"),\n        id: Spacebars.call(\"insertSettingsForm\"),\n        type: Spacebars.call(\"insert\"),\n        template: Spacebars.call(\"telescope\"),\n        \"label-class\": Spacebars.call(\"control-label\"),\n        \"input-col-class\": Spacebars.call(\"controls\")\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"quickForm\"));\n    }), \"\\n  \" ];\n  });\n}));\n","AutoForm.addHooks(['updateSettingsForm', 'insertSettingsForm'], {\n    onSuccess: function(operation, result) {\n      this.template.$('button[type=submit]').removeClass('loading');\n    },\n\n    onError: function(operation, result, template) {\n      this.template.$('button[type=submit]').removeClass('loading');\n    }\n});\n\nAutoForm.hooks({\n  updateSettingsForm: {\n    before: {\n      update: function(modifier) {\n        this.template.$('button[type=submit]').addClass('loading');\n        return modifier;\n      }\n    }\n\n  },\n  insertSettingsForm: {\n    before: {\n      insert: function(doc) {\n        this.template.$('button[type=submit]').addClass('loading');\n        return doc;\n      }\n    }\n  }\n});\n"]}