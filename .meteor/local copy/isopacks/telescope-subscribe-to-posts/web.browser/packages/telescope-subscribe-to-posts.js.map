{"version":3,"sources":["telescope-subscribe-to-posts//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/studentfactory/packages/telescope-subscribe-to-posts/package-tap.i18n","telescope-subscribe-to-posts/lib/subscribe-to-posts.js","telescope-subscribe-to-posts/lib/client/templates/post_subscribe.html","telescope-subscribe-to-posts/lib/client/templates/post_subscribe.js","telescope-subscribe-to-posts/lib/client/templates/user_subscribed_posts.html","telescope-subscribe-to-posts/lib/client/templates/user_subscribed_posts.js","telescope-subscribe-to-posts//Users/lukasfeitsma/Documents/Studie/CMD/Jaar2/Blok4/Project-X/studentfactory/packages/telescope-subscribe-to-posts/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;AAAA,8H;;AAEA,+D;AACA,gD;AACA,2C;AACA,wF;AACA,uH;;AAEA,qD;AACA,6B;AACA,yC;;;;;;;;;;;;;;;;;;;ACVA,mB;AACA,G;AACA,8B;AACA,a;AACA,G;AACA,E;;AAEA,qB;AACA,G;AACA,gC;AACA,qB;AACA,qB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,qB;AACA,G;AACA,oC;AACA,qB;AACA,mB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,qB;AACA,G;AACA,oC;AACA,Y;AACA,G;AACA,E;;AAEA,uD;AACA,gD;AACA,oB;;AAEA,yD;AACA,6D;;AAEA,U;AACA,iC;AACA,6C;AACA,I;AACA,C;;AAEA,+C;AACA,sE;AACA,E;;AAEA,6D;AACA,8C;AACA,e;AACA,oB;AACA,sC;AACA,kB;AACA,K;AACA,E;;AAEA,kE;AACA,8C;AACA,kB;AACA,mC;AACA,sC;AACA,iB;AACA,K;AACA,E;;AAEA,qD;AACA,wC;AACA,6F;AACA,M;AACA,sD;AACA,iB;;AAEA,gC;AACA,8C;AACA,gB;;AAEA,c;AACA,iF;AACA,uC;AACA,8B;AACA,K;;AAEA,mB;AACA,2C;AACA,e;AACA,uB;AACA,8B;AACA,M;AACA,qD;AACA,G;;AAEA,c;AACA,E;;AAEA,uD;AACA,2B;AACA,wC;AACA,2F;;AAEA,wD;AACA,iB;;AAEA,gB;AACA,yE;AACA,mC;AACA,+B;AACA,K;;AAEA,mB;AACA,gD;AACA,2D;AACA,G;AACA,c;AACA,E;;AAEA,gB;AACA,mC;AACA,kE;AACA,I;AACA,qC;AACA,oE;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACnIA,sC;AACA,gF;AACA,kB;AACA,8B;AACA,uD;AACA,iB;AACA,iC;AACA,iD;AACA,wC;AACA,uD;AACA,mB;AACA,qC;AACA,oC;AACA,iB;AACA,sE;AACA,+E;AACA,uC;AACA,mB;AACA,qC;AACA,kC;AACA,iB;AACA,sE;AACA,2E;AACA,uC;AACA,4B;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AC3BA,gD;AACA,4B;AACA,6C;AACA,8D;AACA,I;AACA,0B;AACA,6B;AACA,4B;;AAEA,iD;AACA,G;AACA,G;;AAEA,+C;AACA,kD;AACA,uB;AACA,wC;AACA,a;;AAEA,oB;;AAEA,yB;AACA,4B;AACA,4D;AACA,K;;AAEA,oE;AACA,iB;AACA,yD;AACA,O;AACA,I;;AAEA,oD;AACA,uB;AACA,oB;;AAEA,yB;AACA,4B;AACA,4D;AACA,K;;AAEA,sE;AACA,iB;AACA,2D;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC7CA,4C;AACA,4F;AACA,kB;AACA,mB;AACA,iD;AACA,0D;AACA,oE;AACA,qM;AACA,gD;AACA,iB;AACA,+D;AACA,wB;AACA,wE;AACA,6B;AACA,iC;AACA,Y;AACA,O;AACA,8C;AACA,sD;AACA,4E;AACA,6G;AACA,iC;AACA,qC;AACA,uD;AACA,iB;AACA,wD;AACA,kB;AACA,+B;AACA,8D;AACA,e;AACA,oD;AACA,+D;AACA,iD;AACA,yB;AACA,I;;;;;;;;;;;;;;;;;;;ACnCA,oE;AACA,uB;AACA,sB;;AAEA,4D;AACA,oC;AACA,gC;AACA,qB;AACA,Y;AACA,K;AACA,uC;;AAEA,iE;AACA,4B;;AAEA,8D;AACA,qC;AACA,+C;;AAEA,6C;AACA,2E;;AAEA,2C;AACA,wE;AACA,I;AACA,K;AACA,E;;AAEA,sD;AACA,sB;AACA,oB;AACA,wD;AACA,0C;AACA,6E;AACA,4C;AACA,kB;AACA,O;AACA,iB;AACA,I;AACA,6B;AACA,4F;AACA,G;AACA,G;;AAEA,qD;AACA,+C;AACA,uB;AACA,gD;AACA,qB;AACA,wC;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACnDA,6B;AACA,kD;AACA,+C;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,8J;AACA,gD;AACA,8E;;AAEA,oD;AACA,8C;;AAEA,yC;AACA,C","file":"/packages/telescope-subscribe-to-posts.js","sourcesContent":["TAPi18n.packages[\"telescope-subscribe-to-posts\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n// define the package's templates registrar\nregisterI18nTemplate = TAPi18n._getRegisterHelpersProxy(\"telescope-subscribe-to-posts\");\nregisterTemplate = registerI18nTemplate; // XXX OBSOLETE, kept for backward compatibility will be removed in the future\n\n// Record the list of templates prior to package load\nvar _ = Package.underscore._;\nnon_package_templates = _.keys(Template);\n","threadModules.push(\n  {\n    template: 'postSubscribe',\n    order: 10\n  }\n);\n\naddToPostSchema.push(\n  {\n    propertyName: 'subscribers',\n    propertySchema: {\n      type: [String],\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  }\n);\n\naddToPostSchema.push(\n  {\n    propertyName: 'subscriberCount',\n    propertySchema: {\n      type: Number,\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  }\n);\n\nuserProfileEdit.push(\n  {\n    template: 'userSubscribedPosts',\n    order: 5\n  }\n);\n\nviewParameters.userSubscribedPosts = function (terms) {\n  var user = Meteor.users.findOne(terms.userId),\n      postsIds = [];\n\n  if (user.subscribedItems && user.subscribedItems.Posts)\n    postsIds = _.pluck(user.subscribedItems.Posts, \"itemId\");\n\n  return {\n    find: {_id: {$in: postsIds}},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n}\n\nvar hasSubscribedItem = function (item, user) {\n  return item.subscribers && item.subscribers.indexOf(user._id) != -1;\n};\n\nvar addSubscribedItem = function (userId, item, collection) {\n  var field = 'subscribedItems.' + collection;\n  var add = {};\n  add[field] = item;\n  Meteor.users.update({_id: userId}, {\n    $addToSet: add\n  });\n};\n\nvar removeSubscribedItem = function (userId, itemId, collection) {\n  var field = 'subscribedItems.' + collection;\n  var remove = {};\n  remove[field] = {itemId: itemId};\n  Meteor.users.update({_id: userId}, {\n    $pull: remove\n  });\n};\n\nsubscribeItem = function (collection, itemId, user) {\n  var item = collection.findOne(itemId),\n      collectionName = collection._name.slice(0,1).toUpperCase() + collection._name.slice(1);\n      \n  if (!user || !item || hasSubscribedItem(item, user))\n    return false;\n\n  // author can't subscribe item\n  if (item.userId && item.userId === user._id)\n    return false\n\n  // Subscribe\n  var result = collection.update({_id: itemId, subscribers: { $ne: user._id }}, {\n    $addToSet: {subscribers: user._id},\n    $inc: {subscriberCount: 1}\n  });\n\n  if (result > 0) {\n    // Add item to list of subscribed items\n    var obj = {\n      itemId: item._id,\n      subscribedAt: new Date()\n    };\n    addSubscribedItem(user._id, obj, collectionName);\n  }\n\n  return true;\n};\n\nunsubscribeItem = function (collection, itemId, user) {\n  var user = Meteor.user(),\n      item = collection.findOne(itemId),\n      collectionName = collection._name.slice(0,1).toUpperCase()+collection._name.slice(1);\n\n  if (!user || !item  || !hasSubscribedItem(item, user))\n    return false;\n\n  // Unsubscribe\n  var result = collection.update({_id: itemId, subscribers: user._id }, {\n    $pull: {subscribers: user._id},\n    $inc: {subscriberCount: -1}\n  });\n\n  if (result > 0) {\n    // Remove item from list of subscribed items\n    removeSubscribedItem(user._id, itemId, collectionName);\n  }\n  return true;\n};\n\nMeteor.methods({\n  subscribePost: function(postId) {\n    return subscribeItem.call(this, Posts, postId, Meteor.user());\n  },\n  unsubscribePost: function(postId) {\n    return unsubscribeItem.call(this, Posts, postId, Meteor.user());\n  }\n});\n","\nTemplate.__checkName(\"postSubscribe\");\nTemplate[\"postSubscribe\"] = new Template(\"Template.postSubscribe\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"canSubscribe\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"post-subscribe module grid-block\"\n    }, \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"subscribed\"));\n    }, function() {\n      return [ \"\\n        \", HTML.A({\n        \"class\": \"unsubscribe-link\",\n        href: \"#\"\n      }, \"\\n          \", HTML.SPAN(Blaze.View(\"lookup:_\", function() {\n        return Spacebars.mustache(view.lookup(\"_\"), \"unsubscribe_from_thread\");\n      })), \"\\n        \"), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", HTML.A({\n        \"class\": \"subscribe-link\",\n        href: \"#\"\n      }, \"\\n          \", HTML.SPAN(Blaze.View(\"lookup:_\", function() {\n        return Spacebars.mustache(view.lookup(\"_\"), \"subscribe_to_thread\");\n      })), \"\\n        \"), \"\\n      \" ];\n    }), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","Template[getTemplate('postSubscribe')].helpers({\n  canSubscribe: function() {\n    // you cannot subscribe to your own posts\n    return Meteor.userId() && this.userId !== Meteor.userId();\n  },\n  subscribed: function() {\n    var user = Meteor.user();\n    if (!user) return false;\n\n    return _.include(this.subscribers, user._id);\n  }\n});\n\nTemplate[getTemplate('postSubscribe')].events({\n  'click .subscribe-link': function(e, instance) {\n    e.preventDefault();\n    if (this.userId === Meteor.userId())\n      return;\n\n    var post = this;\n\n    if (!Meteor.user()) {\n      Router.go('atSignIn');\n      Messages.flash(i18n.t(\"please_log_in_first\"), \"info\");\n    }\n\n    Meteor.call('subscribePost', post._id, function(error, result) {\n      if (result)\n        trackEvent(\"post subscribed\", {'_id': post._id});\n    });\n  },\n\n  'click .unsubscribe-link': function(e, instance) {\n    e.preventDefault();\n    var post = this;\n\n    if (!Meteor.user()) {\n      Router.go('atSignIn');\n      Messages.flash(i18n.t(\"please_log_in_first\"), \"info\");\n    }\n\n    Meteor.call('unsubscribePost', post._id, function(error, result) {\n      if (result)\n        trackEvent(\"post unsubscribed\", {'_id': post._id});\n    });\n  }\n});\n","\nTemplate.__checkName(\"userSubscribedPosts\");\nTemplate[\"userSubscribedPosts\"] = new Template(\"Template.userSubscribedPosts\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"grid-small grid-block dialog admin\"\n  }, \"\\n    \", HTML.H3(Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"subscribed_posts\");\n  })), \"\\n    \", HTML.TABLE(\"\\n    \", HTML.THEAD(\"\\n      \", HTML.TR(\"\\n        \", HTML.TD(\"Post\"), \"\\n        \", HTML.TD(\"Subscribed At\"), \"\\n      \"), \"\\n    \"), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"posts\"));\n  }, function() {\n    return [ \"\\n      \", HTML.TR(\"\\n        \", HTML.TD(HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), Spacebars.kw({\n          route: \"post_page\",\n          _id: view.lookup(\"_id\")\n        }));\n      }\n    }, Blaze.View(\"lookup:title\", function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    }))), \"\\n        \", HTML.TD(Blaze.View(\"lookup:formatDate\", function() {\n      return Spacebars.mustache(view.lookup(\"formatDate\"), view.lookup(\"subscribedAt\"), \"MM/DD/YYYY, HH:mm\");\n    })), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"hasMorePosts\"));\n  }, function() {\n    return [ \"\\n      \", HTML.TR(\"\\n        \", HTML.TD({\n      colspan: \"2\"\n    }, \"\\n          \", HTML.A({\n      \"class\": \"subscribedposts-more more-button grid-module\",\n      href: \"#\"\n    }, HTML.SPAN(Blaze.View(\"lookup:_\", function() {\n      return Spacebars.mustache(view.lookup(\"_\"), \"load_more\");\n    }))), \"\\n        \"), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Template[getTemplate('userSubscribedPosts')].created = function () {\n  var user = this.data,\n      instance = this;\n\n  // initialize the terms and posts local reactive variables\n  instance.terms = new ReactiveVar({\n    view: 'userSubscribedPosts',\n    userId: user._id,\n    limit: 5\n  });\n  instance.posts = new ReactiveVar({});\n\n  // will re-run when the \"terms\" local reactive variable changes\n  this.autorun(function () {\n\n    // get the new terms and generate new parameters from them\n    var terms = instance.terms.get();\n    var parameters = getPostsParameters(terms);\n\n    // subscribe to the userPosts publication\n    instance.subscription = Meteor.subscribe('userSubscribedPosts', terms);\n\n    // update the instance's \"posts\" cursor\n    instance.posts.set(Posts.find(parameters.find, parameters.options));\n    \n  });\n};\n\nTemplate[getTemplate('userSubscribedPosts')].helpers({\n  posts: function () {\n    var user = this,\n        posts = Template.instance().posts.get().fetch();\n    posts = _.map(posts, function (post) {\n      var item = _.findWhere(user.subscribedItems.Posts, {itemId: post._id});\n      post.subscribedAt = item.subscribedAt;\n      return post;\n    });\n    return posts;\n  },\n  hasMorePosts: function () {\n    return Template.instance().posts.get().count() >= Template.instance().terms.get().limit;\n  }\n});\n\nTemplate[getTemplate('userSubscribedPosts')].events({\n  'click .subscribedposts-more': function (e) {\n    e.preventDefault();\n    var terms = Template.instance().terms.get();\n    terms.limit += 5;\n    Template.instance().terms.set(terms)\n  }\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope-subscribe-to-posts\",\n    namespace = \"telescope-subscribe-to-posts\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"subscribed_posts\":\"Projecten die jij volgt\",\"subscribe_to_thread\":\"Volg project\",\"unsubscribe_from_thread\":\"Ontvolg dit project\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\nvar package_templates = _.difference(_.keys(Template), non_package_templates);\n\nfor (var i = 0; i < package_templates.length; i++) {\n  var package_template = package_templates[i];\n\n  registerI18nTemplate(package_template);\n}\n"]}